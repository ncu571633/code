 Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

    push(x) -- Push element x onto stack.
    pop() -- Removes the element on top of the stack.
    top() -- Get the top element.
    getMin() -- Retrieve the minimum element in the stack.

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

class MinStack {
public:
    MinStack() {
        min_val = INT_MAX;
    }  
    void push(int x) {
        if (x <= min_val) {
            st.push(min_val);
            min_val = x;
        }
        st.push(x);
    }   
    void pop() {
        int t = st.top(); st.pop();
        if (t == min_val) {
            min_val = st.top(); st.pop();
        }
    }  
    int top() {
        return st.top();
    }    
    int getMin() {
        return min_val;
    }

private:
    int min_val;
    stack<int> st;
};


class MinStack {
public:
    MinStack() {
        
    }
    
    void push(int val) {
        s.push(val);
        if (minS.empty() || minS.top().first > val)
        {
            minS.push({val, 1});
            return ;
        }
        if (minS.top().first == val)
        {
            minS.top().second ++;
            return ;
        }
    }
    
    void pop() {
        int i = s.top();
        s.pop();
        if (minS.top().first == i)
        {
            minS.top().second --;
            if(minS.top().second == 0)
            {
                minS.pop();
            }
        }
    }
    
    int top() {
        return s.top();
    }
    
    int getMin() {
        return minS.top().first;
    }
private:
    stack<int> s;
    stack<pair<int, int>> minS;
};
