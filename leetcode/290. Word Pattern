Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Examples:

    pattern = "abba", str = "dog cat cat dog" should return true.
    pattern = "abba", str = "dog cat cat fish" should return false.
    pattern = "aaaa", str = "dog cat cat dog" should return false.
    pattern = "abba", str = "dog dog dog dog" should return false.

Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space. 

class Solution {
public:
    bool wordPattern(string pattern, string str) {
        istringstream in(str);
        unordered_map<char, string> m1;
        unordered_map<string, char> m2;
        int k = 0;  // string pattern index
        for(string word; in >> word; k++) {
            if(m1.count(pattern[k]) == 0 && m2.count(word)==0) {
                m1[pattern[k]] = word, m2[word] = pattern[k];
                continue;
            }
            if(m1[pattern[k]] != word || m2[word]!=pattern[k]) {
                return false;
            }
        }
        return k==pattern.size();
    }
};

class Solution {
public:
    bool wordPattern(string pattern, string s) {
        if(pattern.empty())
            return false;
        unordered_map<char, string> m;
        unordered_map<string, char> m2;
        vector<string> strs;
        string word;
        for(int i=0; i<s.size(); i++)
        {
            if(s[i]!=' ')
            {
                word += s[i];
                continue;
            }
            
            if(!word.empty())
                strs.push_back(word);
            word = "";
        }
        if(!word.empty())
            strs.push_back(word);
        if(strs.size() != pattern.size())
            return false;
        for(int i=0; i<pattern.size(); i++)
        {
            char p = pattern[i];
            string word = strs[i];
            if(m.count(p))
            {
                if(m[p] != word)
                    return false;
            }
            else
                m[p] = word;

            if(m2.count(word))
            {
                if(m2[word]!=p)
                    return false;                
            }
            else
                m2[word] = p;
        }

        return true;
    }
};
