Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.


class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if (grid.size() == 0 || grid[0].size() == 0)
            return 0;
        
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> v(m, vector<int>(n, 0));
        v[0][0] = grid[0][0];
        for(int i=1; i<n; i++)
            v[0][i] = grid[0][i] + v[0][i-1];
        for(int i=1; i<m; i++)
            v[i][0] = grid[i][0] + v[i-1][0];
        for(int i=1; i<m; i++)
            for(int j=1; j<n; j++)
                v[i][j] = min(v[i][j-1], v[i-1][j]) + grid[i][j];

        return v.back().back();
    }
};
