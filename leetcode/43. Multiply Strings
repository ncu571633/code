Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

 

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"

Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"

 

Constraints:

    1 <= num1.length, num2.length <= 200
    num1 and num2 consist of digits only.
    Both num1 and num2 do not contain any leading zero, except the number 0 itself.

class Solution {
public:
    string multiply(string num1, string num2) {
        vector<int> val(num1.size()+num2.size(), 0);

        for(int i = num1.size()-1; i>=0; i--)
        {
            for(int j = num2.size()-1; j>=0; j--)
            {
                int t = (num1[i]-'0') * (num2[j]-'0');
                int p1 = i + j, p2 = i + j + 1;
                int sum = t + val[p2];
                val[p1] += sum/10;
                val[p2] = sum%10;
            }
        }

        string ret;
        for(int i=0; i<val.size(); i++)
        {
            if (!ret.empty() || val[i] !=0)
                ret.push_back(val[i] + '0');
        }

        return ret.empty()? "0": ret;
    }
};
