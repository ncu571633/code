 Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z. 

class TrieNode {
public:
    map<char, TrieNode*> next;
    bool isWord = false;
};

class Trie {
public:
    Trie() 
    {
        root = new TrieNode();
    }

    void insert(string word) 
    {
        TrieNode* nextNode = root;
        for(int i=0; i<word.size(); i++) 
        {
            char c = word[i];
            if(nextNode->next[c] == nullptr)
                nextNode->next[c] = new TrieNode();
            nextNode = nextNode->next[word[i]];
        }
        nextNode->isWord = true;
    }

    bool search(string word) 
    {
        return startsWith(word, true);
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix, bool isWord=false) 
    {
        TrieNode* nextNode = root;
        for(int i=0; i<prefix.size(); i++) 
        {
            char c = prefix[i];
            if(nextNode->next[c] == nullptr)
                return false;
            nextNode = nextNode->next[c];
        }
        if(isWord)
            return nextNode->isWord;
        else
            return true;        
    }

private:
    TrieNode* root;
};


/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
