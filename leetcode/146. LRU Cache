 Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item. 

class LRUCache{
private:
    map<int, list<pair<int, int>>::iterator> m;   // have to be a pair. line 31
    list<pair<int, int>> l;
    int size;
public:
    LRUCache(int capacity) {
        size = capacity;
    }
    
    int get(int key) {
        if(m.count(key) == 0)
            return -1;
        int value = m[key]->second;
        if(m[key] != l.begin()) {
            l.erase(m[key]);
            l.push_front({key, value});
            m[key] = l.begin();
        }
        return value;
    }
    
    void set(int key, int value) {
       if(!m.count(key)) {
           if(l.size() == size) {
                m.erase(prev(l.end())->first);
                l.erase(prev(l.end()));
           }
       } else {
            l.erase(m[key]);
       }
       l.push_front({key, value});
       m[key] = l.begin();
    }
};



using namespace std;
template<typename T>
class LRUCache{
private:
    unordered_map<size_t, typename list<T>::iterator> m;
    list<T> l;
    size_t capacity;
    
    inline size_t getHash(T value)
    {
        return std::hash<T>()(value) % capacity;
    }
    
public:
    LRUCache(size_t c) {
        capacity = c;
    }
    
T get(T&& value)
{
    size_t key = getHash(value);
    auto it = m.find(key);

    if (it == m.end()) {
        l.push_front(std::move(value));
        m[key] = l.begin();
        return T();  // Return default value for new entry
    }

    // Existing element found
    auto itor = it->second;
    T oldValue = std::move(*itor);

    if (itor != l.begin()) 
    {
        l.erase(itor);
        l.push_front(std::move(value));
        return oldValue;
    }

    // Update value in-place
    *itor = std::move(value);
    return oldValue;
}
    
    void set(T&& value) 
    {
        size_t key = getHash(value);
       if(!m.count(key)) {
           if(l.size() == capacity) {
                m.erase(key);
                l.erase(prev(l.end()));
           }
       } else {
            l.erase(m[key]);
       }
       l.push_front(value);
       m[key] = l.begin();
    }
};

int main()
{
    LRUCache<int> cache(10);
    cache.set(1);
    std::cout<<cache.get(1);

    return 0;
}
