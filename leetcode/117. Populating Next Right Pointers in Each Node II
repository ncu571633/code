/*
Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root)
            return root;

        queue<Node*> q;
        q.push(root);
        while(!q.empty())
        {
            int n = q.size();
            Node* pre = nullptr;
            for (int i=0; i<n; i++)
            {
                Node* t = q.front();
                q.pop();
                if (t->left)
                    q.push(t->left);
                if (t->right)
                    q.push(t->right);
                if (pre)
                    pre->next = t;
                pre = t;
            }
        }

        return root;
    }
};
