/*
Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL
*/

/*
 * Definition for binary tree with next pointer.
 */
 #include "stdio.h"
 struct TreeLinkNode {
   int val;
   TreeLinkNode *left, *right, *next;
   TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
  };


class Solution {
public:
    Node* connect(Node* root) {
        if (!root) return NULL;
        queue<Node*> q;
        q.push(root);
        while (!q.empty()) {
            int len = q.size();
            for (int i = 0; i < len; ++i) {
                Node *t = q.front(); q.pop();
                if (i < len - 1) t->next = q.front();
                if (t->left) q.push(t->left);
                if (t->right) q.push(t->right);
            }
        }
        return root;
    }
};

    void connect(TreeLinkNode *root) {
        TreeLinkNode* dummy = new TreeLinkNode(0), *t = dummy;
        while(root)
        {
            if(root->left)
            {
                t->next = root->left;
                t= t->next;
            }
            if(root->right)
            {
                t->next = root->right;
                t= t->next;
            }
            root = root->next;
            if(!root)
            {
                t = dummy;
                root = dummy->next;
                dummy->next = nullptr;
            }
        }
    }
