 Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. You may assume the dictionary does not contain duplicate words.

Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].

A solution is ["cats and dog", "cat sand dog"]. 

class Solution {
public:
    void wordBreak(string s, unordered_set<string> wordDict, int start, string str, vector<string>& ret) {
        if(start >= s.size()) {
            str.pop_back();
            ret.push_back(str);
            return ;
        }
        
        for(int i=start; i<s.size(); i++) 
        {
            string word = s.substr(start, i-start+1);
            if(wordDict.count(word)) 
            {
                wordBreak(s, wordDict, i+1, str+word+string(" "), ret);
            }
        }
    } 
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        vector<string> ret;
        string str;
        wordBreak(s, unordered_set<string>(wordDict.begin(), wordDict.end()), 0, str, ret);
        return ret;
    }
};



class TrieNode {
public:
    map<char, TrieNode*> next;
    bool isWord = false;
};

class Trie {
public:
    Trie() 
    {
        root = new TrieNode();
    }

    Trie(vector<string>& words)
    {
        root = new TrieNode();
        for(int i=0; i<words.size(); i++)
        {
            insert(words[i]);
        }
    }

    void insert(string word) 
    {
        TrieNode* nextNode = root;
        for(int i=0; i<word.size(); i++) 
        {
            char c = word[i];
            if(nextNode->next[c] == nullptr)
                nextNode->next[c] = new TrieNode();
            nextNode = nextNode->next[word[i]];
        }
        nextNode->isWord = true;
    }

    bool search(string word) 
    {
        return startsWith(word, true);
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix, bool isWord=false) 
    {
        TrieNode* nextNode = root;
        for(int i=0; i<prefix.size(); i++) 
        {
            char c = prefix[i];
            if(nextNode->next[c] == nullptr)
                return false;
            nextNode = nextNode->next[c];
        }
        if(isWord)
            return nextNode->isWord;
        else
            return true;        
    }

private:
    TrieNode* root;
};

class Solution {
public:
    void wordBreak(string s, Trie* wordDict, int start, string str, vector<string>& ret) {
        if(start >= s.size())
        {
            str.pop_back();
            ret.push_back(str);
            return ;
        }

        if(wordDict->startsWith(string(1, s[0]), false) == false)
            return;

        for(int i=start; i<s.size(); i++) 
        {
            string word = s.substr(start, i-start+1);
            if(wordDict->search(word)) 
            {
                wordBreak(s, wordDict, i+1, str+word+string(" "), ret);
            }
        }
    } 
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        vector<string> ret;
        string str;
        wordBreak(s, new Trie(wordDict), 0, str, ret);
        return ret;
    }
};
