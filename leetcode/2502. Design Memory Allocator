You are given an integer n representing the size of a 0-indexed memory array. All memory units are initially free.

You have a memory allocator with the following functionalities:

    Allocate a block of size consecutive free memory units and assign it the id mID.
    Free all memory units with the given id mID.

Note that:

    Multiple blocks can be allocated to the same mID.
    You should free all the memory units with mID, even if they were allocated in different blocks.

Implement the Allocator class:

    Allocator(int n) Initializes an Allocator object with a memory array of size n.
    int allocate(int size, int mID) Find the leftmost block of size consecutive free memory units and allocate it with the id mID. Return the block's first index. If such a block does not exist, return -1.
    int freeMemory(int mID) Free all memory units with the id mID. Return the number of memory units you have freed.

 

Example 1:

Input
["Allocator", "allocate", "allocate", "allocate", "freeMemory", "allocate", "allocate", "allocate", "freeMemory", "allocate", "freeMemory"]
[[10], [1, 1], [1, 2], [1, 3], [2], [3, 4], [1, 1], [1, 1], [1], [10, 2], [7]]
Output
[null, 0, 1, 2, 1, 3, 1, 6, 3, -1, 0]

Explanation
Allocator loc = new Allocator(10); // Initialize a memory array of size 10. All memory units are initially free.
loc.allocate(1, 1); // The leftmost block's first index is 0. The memory array becomes [1,_,_,_,_,_,_,_,_,_]. We return 0.
loc.allocate(1, 2); // The leftmost block's first index is 1. The memory array becomes [1,2,_,_,_,_,_,_,_,_]. We return 1.
loc.allocate(1, 3); // The leftmost block's first index is 2. The memory array becomes [1,2,3,_,_,_,_,_,_,_]. We return 2.
loc.freeMemory(2); // Free all memory units with mID 2. The memory array becomes [1,_, 3,_,_,_,_,_,_,_]. We return 1 since there is only 1 unit with mID 2.
loc.allocate(3, 4); // The leftmost block's first index is 3. The memory array becomes [1,_,3,4,4,4,_,_,_,_]. We return 3.
loc.allocate(1, 1); // The leftmost block's first index is 1. The memory array becomes [1,1,3,4,4,4,_,_,_,_]. We return 1.
loc.allocate(1, 1); // The leftmost block's first index is 6. The memory array becomes [1,1,3,4,4,4,1,_,_,_]. We return 6.
loc.freeMemory(1); // Free all memory units with mID 1. The memory array becomes [_,_,3,4,4,4,_,_,_,_]. We return 3 since there are 3 units with mID 1.
loc.allocate(10, 2); // We can not find any free block with 10 consecutive free memory units, so we return -1.
loc.freeMemory(7); // Free all memory units with mID 7. The memory array remains the same since there is no memory unit with mID 7. We return 0.

#include <vector>
using namespace std;

class Allocator {
public:
    vector<int> memory;

    Allocator(int n) {
        memory = vector<int>(n, 0);
    }

    int allocate(int size, int mID) {
        int count = 0;
        for (int i = 0; i < memory.size(); ++i) {
            if (memory[i] > 0) {
                count = 0;
            } else if (++count == size) {
                fill(memory.begin() + i - size + 1, memory.begin() + i + 1, mID);
                return i - size + 1;
            }
        }
        return -1; // No consecutive block found
    }

    int freeMemory(int mID) {
        int freed = 0;
        for (int& unit : memory) {
            if (unit == mID) {
                unit = 0;
                ++freed;
            }
        }
        return freed;
    }
};


#include <vector>
#include <list>
#include <unordered_map>
using namespace std;

class Allocator {
    struct FreeBlock {
        int start;
        int size;
        FreeBlock(int s, int sz): start(s), size(sz) {}
    };

    int n;
    list<FreeBlock> freeList;  // List of current free blocks, sorted by start
    unordered_map<int, vector<pair<int, int>>> allocations; // mID -> allocated {start, size}

public:
    Allocator(int n_) : n(n_) {
        freeList.emplace_back(0, n_); // All memory is initially free
    }

    int allocate(int size, int mID) {
        for (auto it = freeList.begin(); it != freeList.end(); ++it) {
            if (it->size >= size) {
                int allocStart = it->start;
                allocations[mID].push_back({allocStart, size});
                if (it->size == size) {
                    freeList.erase(it);
                } else {
                    it->start += size;
                    it->size -= size;
                }
                return allocStart;
            }
        }
        return -1;
    }

    int free(int mID) {
        if (!allocations.count(mID)) return 0;
        int unitsFreed = 0;
        for (auto &[start, size]: allocations[mID]) {
            unitsFreed += size;
            // Find position to insert and coalesce
            auto it = freeList.begin();
            while (it != freeList.end() && it->start < start) ++it;
            // Try to merge with previous block
            if (it != freeList.begin()) {
                auto prev = prev(it);
                if (prev->start + prev->size == start) {
                    prev->size += size;
                    // Try to also merge with the next one
                    if (it != freeList.end() && start + size == it->start) {
                        prev->size += it->size;
                        freeList.erase(it);
                    }
                    continue;
                }
            }
            // Try to merge with next block only
            if (it != freeList.end() && start + size == it->start) {
                it->start = start;
                it->size += size;
            } else {
                freeList.insert(it, FreeBlock(start, size));
            }
        }
        allocations.erase(mID);
        return unitsFreed;
    }
};

