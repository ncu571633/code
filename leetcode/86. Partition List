Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.

Example 1:
Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

Example 2:
Input: head = [2,1], x = 2
Output: [1,2]

Constraints:
    The number of nodes in the list is in the range [0, 200].
    -100 <= Node.val <= 100
    -200 <= x <= 200

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode* h1 = new ListNode(0, nullptr), *h2 = new ListNode(0, nullptr);
        ListNode* l1 = h1, *l2 = h2;
        while(head)
        {
            if(head->val < x)
            {
                l1->next = head;
                head = head->next;
                l1 = l1->next;
                l1->next = nullptr;
            }
            else
            {
                l2->next = head;
                head = head->next;
                l2 = l2->next;
                l2->next = nullptr;
            }
        }
        ListNode* p = h1;
        while(p)
        {
            cout<< p->val << endl;
            p = p->next;
        }
        cout<<"h2";
        p = h2;
        while(p)
        {
            cout<< p->val << endl;
            p = p->next;
        }

        if (l1)
            l1->next = h2->next;
        return h1->next;
    }
};
