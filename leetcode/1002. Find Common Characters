Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.

Example 1:
Input: words = ["bella","label","roller"]
Output: ["e","l","l"]

Example 2:
Input: words = ["cool","lock","cook"]
Output: ["c","o"]

Constraints:
    1 <= words.length <= 100
    1 <= words[i].length <= 100
    words[i] consists of lowercase English letters.

class Solution {
public:
    vector<string> commonChars(vector<string>& words) 
    {
        unordered_map<char, size_t> m; // 26 * sizeof(int) * 2
        for (size_t j=0; j<words[0].size(); j++)
            m[words[0][j]] ++;  

        for (size_t i=1; i<words.size(); i++)
        {
            unordered_map<char, size_t> temp;
            for (size_t j=0; j<words[i].size(); j++)
            {
                char c = words[i][j];
                temp[c] ++;
            }

            for (auto iter=m.begin(); iter!=m.end(); iter++)
            {
                char c = iter->first;
                m[c] = min(iter->second, temp[c]);
            }
        }

        vector<string> ret;
        for(auto iter=m.begin(); iter!=m.end(); iter++)
        {
            for (size_t i=0; i<iter->second; i++)
            {
                ret.push_back(string(1, iter->first));
            }
        }

        return ret;
    }
};
