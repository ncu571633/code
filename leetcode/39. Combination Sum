 Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:

    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.

For example, given candidate set [2, 3, 6, 7] and target 7,
A solution set is:

[
  [7],
  [2, 2, 3]
]


class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
        vector<vector<int>> ret;
        if (candidates.size() == 0)
            return ret;

        sort(candidates.begin(), candidates.end());
        vector<int> v;
        helper(candidates, target, 0, ret, v, 0);
        return ret;
    }

    void helper(vector<int>& candidates, int target, int start, vector<vector<int>>& ret, vector<int>& v, int sum)
    {
        if (sum > target)
        {
            return ;
        }

        if (sum == target)
        {
            ret.push_back(v);
            return;
        }

        for(int i=start; i<candidates.size(); i++)
        {
            v.push_back(candidates[i]);
            helper(candidates, target, i, ret, v, sum + candidates[i]);
            v.pop_back();
        }
    }
};
