min heap:
template <class T>
struct greater {
    bool operator()(const T& lhs, const T& rhs) const {
        return lhs > rhs;
    }
};

priority_queue <int, vector<int>, std::greater<int>> gq;



class Solution {
public:
    static bool sortPairs(vector<int> v1, vector<int> v2)
    {
        return v1[1] < v2[1];
    }
    
    int findLongestChain(vector<vector<int>>& pairs) {
        int n = pairs.size();
        if(!n)
            return 0;
        sort(pairs.begin(), pairs.end(), sortPairs);
        int ret=0, end=INT_MIN;
        for(int i=0; i<n; i++)
        {
            if(pairs[i][0] > end)
            {
                ret++;
                end = pairs[i][1];
            }
        }
        return ret;
    }
};



https://www.geeksforgeeks.org/set-vs-unordered_set-c-stl/
Differences :

                |     set             | unordered_set
---------------------------------------------------------
Ordering        | increasing  order   | no ordering
                | (by default)        |

Implementation  | Self balancing BST  | Hash Table
                | like Red-Black Tree |  

search time     | log(n)              | O(1) -> Average 
                |                     | O(n) -> Worst Case

Insertion time  | log(n) + Rebalance  | Same as search
                      
Deletion time   | log(n) + Rebalance  | Same as search

Use set when

    We need ordered data.
    We would have to print/access the data (in sorted order).
    We need predecessor/successor of elements.
    Since set is ordered, we can use functions like binary_search(), lower_bound() and upper_bound() on set elements. These functions cannot be used on unordered_set().
    See advantages of BST over Hash Table for more cases.

Use unordered_set when

    We need to keep a set of distinct elements and no ordering is required.
    We need single element access i.e. no traversal.
