Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},

   1
    \
     2
    /
   3

return [1,2,3]


class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ret;
        preorderTraversal(root, ret);
        return ret;
    }

    void preorderTraversal(TreeNode* root, vector<int>& ret) {
        if(!root)
            return ;
        ret.push_back(root->val);        
        preorderTraversal(root->left, ret);
        preorderTraversal(root->right, ret);
    }
};


class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> v;
        stack<TreeNode*> s;
        s.push(root);
        while(!s.empty()) {
            while(s.top()) {
                v.push_back(s.top()->val);
                s.push(s.top()->left);
            }
            s.pop();
            if(!s.empty()) {
                TreeNode *t = s.top();
                s.pop();
                s.push(t->right);
            }
        }

        return v;
    }
};
