A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.
The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any non-empty path.

Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Example 2:
Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.

Constraints:
    The number of nodes in the tree is in the range [1, 3 * 104].
    -1000 <= Node.val <= 1000

    int maxPathSum(TreeNode* root) {
        int res = INT_MIN;
        helper(root, res);
        return res;
    }

// 递归函数返回值就可以定义为以当前结点为根结点，到叶节点的最大路径之和  max path from root to leaf
// 全局路径最大值放在参数中，用结果 res 来表示   
    int helper(TreeNode* node, int& res) 
    {
        if (!node) 
          return 0;
        int left = max(helper(root->left, ret), 0); 
        int right = max(helper(root->right, ret), 0); 
        ret = max(ret, left + right + root->val);
        ret = max(ret, max(left, right) + root->val);

        // return value: max path sum from nodes, can only pick left or right, but not both
        return max(left, right) + node->val;
    }
