You are given an array nums consisting of positive integers.

Starting with score = 0, apply the following algorithm:

    Choose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index.
    Add the value of the chosen integer to score.
    Mark the chosen element and its two adjacent elements if they exist.
    Repeat until all the array elements are marked.

Return the score you get after applying the above algorithm.

 

Example 1:

Input: nums = [2,1,3,4,5,2]
Output: 7
Explanation: We mark the elements as follows:
- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,1,3,4,5,2].
- 2 is the smallest unmarked element, so we mark it and its left adjacent element: [2,1,3,4,5,2].
- 4 is the only remaining unmarked element, so we mark it: [2,1,3,4,5,2].
Our score is 1 + 2 + 4 = 7.

Example 2:

Input: nums = [2,3,5,1,3,2]
Output: 5
Explanation: We mark the elements as follows:
- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,5,1,3,2].
- 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [2,3,5,1,3,2].
- 2 is the only remaining unmarked element, so we mark it: [2,3,5,1,3,2].
Our score is 1 + 2 + 2 = 5.


class Solution {

public:

    long long findScore(vector<int>& nums) {
        int size = nums.size();
        // 'visited' vector keeps track of whether a number at an index has been added to the score.
        vector<bool> visited(size, false);
        // Pair to store the value and its index in the heap.
        using ValueIndexPair = pair<int, int>;
        // Min-heap to store numbers and their indices based on their value, in ascending order.
        priority_queue<ValueIndexPair, vector<ValueIndexPair>, greater<ValueIndexPair>> min_heap;
        // Populate the heap with the numbers and their indices.
        for (int i = 0; i < size; ++i) {
            min_heap.emplace(nums[i], i);
        }
        long long score = 0;
        // Process the numbers until the heap is empty.
        while (!min_heap.empty()) {
            auto [value, index] = min_heap.top();
            min_heap.pop();
            // Add the value from the top of the min-heap to the score.
            score += value;
            // Mark the current index as visited.
            visited[index] = true;
            // Mark the adjacent numbers as visited as well, as per the problem statement.
            if (index + 1 < size) {
                visited[index + 1] = true;
            }

            if (index - 1 >= 0) {
                visited[index - 1] = true;
            }

            // Remove the top element of the heap if it's been visited.
            while (!min_heap.empty() && visited[min_heap.top().second]) {
                min_heap.pop();
            }
        }

        // Return the final calculated score.
        return score;
    }

};
