Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) 
    {
        int i = 0, j = nums.size()-1;
        while(i<=j)
        {
            int k = i+(j-i)/2;
            if (nums[k] == target)
            {
                i = k;
                while(i-1>=0 && nums[i-1] ==target)
                    i--;
                j = k;
                while(j+1<nums.size() && nums[j+1] ==target)
                    j++;
                return vector<int>({i, j});
            }
            else if (nums[k] > target)
                j = k-1;
            else
                i = k+1;
        }

        return vector<int>({-1, -1});
    }
};
