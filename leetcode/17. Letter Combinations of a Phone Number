Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.

Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].


class Solution {
public:
    vector<string> letterCombinations(string digits) 
    {
        vector<string> ret;
        if (digits.length())
        {
            const vector<string> dict = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
            string str;
            helper(digits, 0, dict, ret, str);
        }
        return ret;
    }

    void helper(const string& digits, int start, const vector<string>& dict, vector<string>& ret, string& str)
    {
        if (str.length() == digits.length())
        {
            ret.push_back(str);
            return;
        }

        int index = digits[start] - '0';
        for(int i=0; i<dict[index].size(); i++)
        {
            str += string(1, dict[index][i]);
            helper(digits, start+1, dict, ret, str);
            str.pop_back();
        }
    }
};
