1. clarify the requirement/goal of the system
    traffic size: daily active user
    functionalities, components
    (1) tweet: create, delete
    (2) timeline/feed: home, user
    (3) follow a user
    (4) like a tweet
    (5) search tweet
    
     non-functional requirement
     (consistency): Consistency means that a read request for a specific data made at any of the nodes of the distributed system database should return the same value.
		Strong consistency:
		The reads are guaranteed to return the most recent committed version of an item. 
		A client never sees an uncommitted or partial write. Users are always guaranteed to read the latest committed write.
		
		Eventual consistency:
		is ideal where the application doesn't require any ordering guarantees. 
		Examples include count of Retweets, Likes, or non-threaded comments.
	        
		every request receive a response, without the guarantee that it contains the most recent write
		
		Strong consistency may also suffer from reduced availability (during failures) because data can't replicate and commit in every region. 
		Eventual consistency offers higher availability and better performance, but it's more difficult to program applications because data may not be consistent across all regions.Feb 27, 2023


     availability: the system responds quickkly, even during failures.
     scalability: be scaled to support large data set. 
     Low Latency
     partition tolerance: system continues to operate despite a number of messages being dropped/delayed.                


CAP theorem
(1) consistency: all clients see the same data at the same time no matter which node they connect to.
(2) availability: any client which requests data gets a response even if some of the nodes are down.
(3) partition tolerance: a partition indicates a communication break between two nodes. Partition tolerance means the system continues to operate despite network partitions. 

choose consistency over availability: block all write operations to avoid data inconsistency among DB servers, which makes system unavailable. 
choose availability over consisntency: system keeps accepting reads, even it might return stale data.

2. capacity estimation
	how many daily active user, how many tweets
	each user: visit timeline 5 times
	every timeline/page: 20 tweets
	each tweet has size 280 bytes, metadata 30 bytes, photo/video
	  storage estimate: write size daily: text 100M * (280+30) = 31GB/day
	  bandwidth estimate: 200M*(5 home visit) * 20 tweets /page = 32B tweets/day
	          text: 32B*280bytes/86400 = 100MB/S
	daily write size
	replication: redundancy: replication * 3, 
	      

3. system APIs
	postTweet(userToken, string tweet)
	deleteTweet(userToken, string tweetID)
	likeOrUnlickTweet(userToken, string tweetId, bool like)
	readHomeTimeLine(userToken, int pageSize, pageToken)
	readUserTimeLine(userToken, int pageSize, pageToken)

4. data storage
	table: user table, tweet table, follower table
Structure:
SQL databases are table based
NoSQL databases can be document-oriented, key-value pairs, or graph structures.

Scalability:
	SQL databases scale vertically, usually on a single server
	NoSQL databases offer horizontal scalability, meaning that more servers simply need to be added to increase their data load. 
This means that NoSQL databases are better for modern cloud-based infrastructures, which offer distributed resources.

When to use NoSQL:
	Low latency;
	unstructureed, have no relation data.
	only need to serialize and deserialize data.
	need to store massive amount of data.

	high performance, particularly read performance: The way distributed NoSQL systems like Cassandra and Riak work means you can usually get very high read performance by adding more boxes. 
Some go so far as to automatically replicate data across nodes to ensure you always have plenty of copies of your data to access.
    	high availability (HA): Data replicates across nodes in a NoSQL system, so the failure of a single node does not necessarily result in data loss or downtime for your application. 
This also means you can easily add or remove nodes from clusters without impacting availability.

How to do db sharding:
Range-based sharding: based on a range of values.
	for example, name first alphabet A to I -> shard A, J to S -> shard B, T to Z: shard C...
Hashed sharding: hash function(key) -> hash value
Directory sharding: lookup table
Geo sharding

5. high level system design
	user -> load balancer  -> tweet writer server  -> DB
	                       -> timeline service     -> cache   (need low latency, read cache join together on the fly)
	                       
	home timeline: 
	 (1)pull mode: fetch tweets from N followers from DB, merge and return
	     pros: write is fast: O(1)
	     cons: read is slow: O(N) db reads
	 (2) push mode: maintain a feedlist in cache for each user, fanout on write
	      pros: read is fast: O(1) from the feed list in cache
	      cons: write needs more efforts: O(n) write for each new tweets:
	            async tasks
	            delay in showing latest tweets
	 fanout on write:
	    not efficient for user with huge amount of followers
	    hybrid solution: hot user, not hot users

6. scalability
	identify potential bottleneck
	discussion solutions, tradeoffs:
		data sharding: data store, cache
		loading balancing: between user/server, server/db
		data caching: read heavy
data sharding: break large table into smaller shards on multiple servers
pros: horizontal scaling
    shard by creation time
        pros: limited shards to query
        cons: hot/cold data issue, new shards fill up quickly
    shard by hash(user id):
    	pros: simple, query user timeline is straightforward
    	cons: home timeline still need to query multiple shards
    	      non-uniform distribvution
    	      hot user
    shard by hash(tweetid)
    	pros: uniform distribution, high availability
    	cons: need to query all shards in order to generate user/home timeline
	
	






Scale from zero to millions of users

1. Single server setup
User  DNS
1 server(web app, database, cache)

2. Database

User  DNS
1 server(web app, cache)
database server:
Which database to use:
  relational database: SQL
  nonrelational database: unstructured data, low latency, store large data

Vertical scaling vs horizontal scaling
  vertical scaling: add more powers(CPU, RAM)
  horizontal scaling: more servers

Cache:
1. When to use cache: read frequently, not modified infrequently
2. Expiration policy
3. Consistency

Memcached is a general-purpose distributed memory-caching system: cache data from db.

Asynchronous processing: user doesn't need to wait the job to finish, and continue to do the next task.
   for example: upload video/photo
   message queue: kafka
   
Rehashing problem: 
  most keys are redistributed, not just the ones originally stored in the offline server. 

Consisteng hashing: M hashed key space, and N servers. 
A partition is the hash space between adjacent servers.

1. Create a circular number line(from 0 to M-1).
2. Map the server based on IP or name onto the ring. 
3. Move the hash keys in the clockwise direction until the first server was found. 

  virtual nodes: each server is represented by multiple virtual nodes on the ring. 
	Each server is responsible for multiple partitions. 
	As the number of virtual nodes increases, the distribution of keys becomes more balanced. 

RESTful API(Representational state transfer)
* HTTP protocol for data communication.
* REST server contains resource ←access by HTTP methods←REST client get the data
human readable JSON
gRPC uses protocol buffer which reduces file size.
* gRPC: Best for Internal APIs, IoT, and mobile, but slow implementation
* Being cacheable is one of architectural constraints of REST.

    GET requests should be cacheable by default. Usually browsers treat all GET requests cacheable.
    POST requests are not cacheable by default but can be made cacheable by either an Expires header, or a Cache-Control header is added to the response.
    PUT and DELTE are not cacheable at all

                REST	gRPC
Cross-platform	Yes	Yes
Message Format	Custom but generally JSON or XML	Protocol buffers
Message Payload Size	Medium/Large	Small
Processing Complexity	Higher (text parsing)	Lower (well-defined binary structure)
Browser Support	Yes (native)	Yes (via gRPC-Web)


How to design a REST API
addBook(), getBook()
            1. endpoint
            2. HTTP Method
            3. RequestBody/PathVariable
            4. ResponseBody
Considering book as a resource, the following can be the REST APIs:

    create a book resouce
    POST /api/books
    get a particular book
    GET /api/books/{id}
    update details of a book
    PUT /api/books/{ID}
    get all books
    GET /api/books
    search books collection
    GET /api/books?name=twinke
    GET /api/books?author=nobody
    delete a particular book
    DELETE /api/books/{id}

