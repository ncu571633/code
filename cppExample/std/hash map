HashMap(unordered_map)

1. Separate chaining
2. Open addressing

Array for buckets. 

follow pointers in order to search linked lists. 
The upside is that chained hash tables only get linearly slower as the load factor (the ratio of elements in the hash table to the length of the bucket array) increases, even if it rises above 1.

Every entry record is stored in the bucket array itself.
When a new entry has to be inserted, the buckets are examined, starting with the hashed-to slot and proceeding in some probe sequence, until an unoccupied slot is found. 
When searching for an entry, the buckets are scanned in the same sequence, until either the target record is found, or an unused array slot is found, which indicates an unsuccessful search.

Insert: beginning with the cell at index h(k) 
until finding either an empty cell or a cell whose stored key is k

Advantage:
1. Open-addressing is usually faster than chained hashing when the load factor is low because you don't have to follow pointers between list nodes.
It gets very, very slow if the load factor approaches 1 
2. Open addressing hash map could be full. 
When load factor is larger than the threshold, make bucket array larger(allocating a new bucket array, and copying elements from the old one into the new one, then freeing the old one)
3. Open addressing: cache friendly. array, CPU can load the data in the cache line. 
Avoid dynamic memory allocation during computation.
use smaller data types: link list used more memory to store pointer. 


#include<iostream>
#include<list>
#include<vector>
#include<functional>
#include<iterator>
using namespace std;

template<typename KType, typename VType>
class hash_map
{
public:
	using allocSpace = allocator_traits<allocator<pair<KType, VType>>>;
	using bucketType = list<pair<KType, VType>>;
	hash_map()
		: _capacity(2)
	{
		// buckets = allocSpace::allocate(_a, _capacity);
		buckets = new bucketType[_capacity];
	}

	hash_map(int n)
		: _capacity(n)
	{
	}

	hash_map(const hash_map& m)
	{
		_size = m._size;
		_capacity = m._capacity;

		if (m.buckets == nullptr)
		{
			buckets = nullptr;
		}
		else
		{
			buckets = allocSpace::allocate(_a, _capacity);
			for (int i = 0; i < _capacity; i++)
			{
				if (m.buckets[i])
				{
					buckets[i] = list<pair<KType, VType>>(m.buckets[i].begin(), m.buckets[i].begin());
				}
			}
		}
	}

	hash_map(hash_map&& m) noexcept
	{
		_size = m._size;
		_capacity = m._capacity;
		buckets = m.buckets;

		m._size = 0;
		m._capacity = 0;
		m.buckets = nullptr;
	}

	void insert(KType key, VType val) 
	{
		auto it = find(key);
		int index = getIndex(key);
		if (it != buckets[index].end()) 
		{
			it->second = val;
			return;
		}
		buckets[index].push_back({ key,val });
		_size++;
	}

	// typename list<pair<KType, VType>>::iterator find(KType key)
	auto find(KType key)
	{
		int index = getIndex(key);
		// for (auto& i: buckets[index])
		for (auto i = buckets[index].begin(); i != buckets[index].end(); ++i)
		{
			if (i->first == key) 
			{
				return i;
			}
		}

		return buckets[index].end();
	}

	void erase(int key) 
	{
		auto it = find(key);
		int index = getIndex(key);
		if (it != buckets[index].end())
		{
			buckets[index].erase(it);
			_size--;
		}
	}

	VType& operator[] (KType k)
	{
		auto it = find(k);
		int index = getIndex(k);
		if (it != buckets[index].end()) 
		{
			return it->second;
		}
	}

#if false
	void rehashIfNeeded() {
		if (total_elements / bucket_size <= max_load_factor) {
			return;
		}
		bucket_size *= 2;
		auto new_buckets = new list<pair<int, int>>[bucket_size];
		for (int i = 0; i < bucket_size / 2; i++) {
			for (auto& kv_itr : buckets[i]) {
				new_buckets[hash(kv_itr->first)].push_back(*kv_itr);
			}
		}
		delete[] buckets;
		buckets = new_buckets;
	}
#endif

private:
	int getIndex(KType k)
	{
		hash<KType> hash_obj;
		return hash_obj(k) % _capacity;
	}

	list<pair<KType, VType >>* buckets;
	int _size = 0;
	int _capacity = 2;
	allocator<pair<KType, VType>> _a;
};

int main()
{
	hash_map<int, string> m;
	m.insert(1, "1");
	m.insert(2, "2");
	m.insert(3, "3");
	m.insert(4, "4");

	cout << m[3] << endl;
	m[3] = "4";
	cout << m[3] << endl;

	return 0;
}
