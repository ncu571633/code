
placement new:
1. pointer you pass to the “placement new” operator points to a region of memory that is big enough 
2. is properly aligned for the object type that you’re creating

Difference Between emplace_back and push_back in std::vector
differ in how and when they construct the element to be added, which impacts performance, code clarity, and safety.
Usage	Adds an existing object (copy/move)	Constructs an object in-place
Arguments	Takes an object of the vector's type	Takes constructor arguments for the type
Performance	May involve copy/move	Avoids extra copy/move if constructing


deletion: call destructor
only delete memeroy for new
    // buffer on stack
    unsigned char buf[sizeof(int)*2] ;
  
    // placement new in buf
    int *pInt = new (buf) int(3);
    int *qInt = new (buf + sizeof (int)) int(5);
    
  char memory[sizeof(Fred)]; // memory allocation
  void* p = memory;
  Fred* f = new(p) Fred();   // construct
  // ...
  f-       p->~T();
       }

       // deallocate storage p of deleted elements
       void deallocate (pointer p, size_type num) {
           // print message and deallocate memory with global delete
           std::cerr << "deallocate " << num << " element(s)"
                     << " of size " << sizeof(T)
                     << " at: " << (void*)p << std::endl;
           ::operator delete((void*)p);
       }
   };

std::construct_at:
Creates a T object initialized with arguments args... at given address p.
    S* ptr = std::construct_at(reinterpret_cast<S*>(storage), 42, 2.71828f, 3.1415);
    ptr->print(); 
    std::destroy_at(ptr);>~Fred();   // Explicitly call the destructor for the placed object

std::allocator is used to separate allocation and do construction in two steps, also separate destruction and deallocation
allocator is the memory allocator for the STL containers. 
a call of vec.reserve(n) of a vector vec allocates only memory for at least n elements. 
The constructor for each element will not be executed. also v.clear()
    allocator can be adjusted according to the container of your need, for example, vector where you only want to allocate occasionally.
    On the contrary, new doesn’t allow to have control over which constructors are called and simply construct all objects at the same time. 


    allocator<int> myAllocator;
    // allocate space for five ints
    int* arr = myAllocator.allocate(5);
 
    // construct arr[0] and arr[3]
    // myAllocator.construct(arr, 100); // no longer allowed in C++20
    arr[0] = 100; // do this instead
    arr[3] = 10;

    // deallocate space for five ints
    myAllocator.deallocate(arr, 5);    

implementation
	// allocate function uses the operator new function to allocate memory
	// The construct function uses placement-new to construct objects
       // allocate but don't initialize num elements of type T
       pointer allocate (size_type num, const void* = 0) {
           // print message and allocate memory with global new
           std::cerr << "allocate " << num << " element(s)"
                     << " of size " << sizeof(T) << std::endl;
           pointer ret = (pointer)(::operator new(num*sizeof(T)));
           std::cerr << " allocated at: " << (void*)ret << std::endl;
           return ret;
       }

       // initialize elements of allocated storage p with value value
       void construct (pointer p, const T& value) {
           // initialize memory with placement new
           new((void*)p)T(value);
       }

       // destroy elements of initialized storage p
       void destroy (pointer p) {
           // destroy objects by calling their destructor
           p->~T();
       }

       // deallocate storage p of deleted elements
       void deallocate (pointer p, size_type num) {
           // print message and deallocate memory with global delete
           std::cerr << "deallocate " << num << " element(s)"
                     << " of size " << sizeof(T)
                     << " at: " << (void*)p << std::endl;
           ::operator delete((void*)p);
       }
   };

std::construct_at:
Creates a T object initialized with arguments args... at given address p.
    S* ptr = std::construct_at(reinterpret_cast<S*>(storage), 42, 2.71828f, 3.1415);
    ptr->print(); 
    std::destroy_at(ptr);

https://codereview.stackexchange.com/questions/255149/stdvector-allocator-aware-implementation
#include <iostream>

using namespace std;

template<typename T>
class myVector
{
public:
    myVector()
    {
        _capacity = 2;
        _data = _a.allocate(_capacity);
    }    
    myVector(int n)
    {
        _data = _a.allocate(n);
        _capacity = n;
    }
    
    myVector(int n, const T& e)
    {
        _data = allocator_traits<allocator<T>>::allocate(_a, n);
        for(size_t i=0; i<n; i++)
            allocator_traits<allocator<T>>::construct(_a, _data+i, e);
        _size = _capacity = n;
    }
    
    myVector(const myVector& v)
    {
        _size = v._size;
        _capacity = v._capacity;

        if(v._data == nullptr)
            _data = nullptr;
        else
        {
            _data = allocator_traits<allocator<T>>::allocate(_a, _capacity);
            for(size_t i=0; i<_size; i++)
                allocator_traits<allocator<T>>::construct(_a, _data+i, *(v._data+i));
        }
    }
    
    myVector(myVector<T>&& v)
    {
        _data = v._data;
        _size = v._size;
        _capacity = v._capacity;
        _a = move(v._a);
        
        v._data = nullptr;
        v._size = 0;
        v._capacity = 0;
    }

        myVector& operator=(const vector& other) 
        {
            if (this == &other) 
                return *this;
            
            for (size_t i=0; i < _size; ++i)
                allocator_traits<allocator<T>>::destroy(_a, _data + i);
                
            if (other._data)
            {
                if (other.size() > _capacity) 
                {
                    allocator_traits<allocator<T>>::deallocate(_a, _data, _capacity);
                                
                    _capacity = other;
                    _data = allocator_traits<allocator<T>>::allocate(_a, _capacity);
                }
                
                _size = other._size;
                for (size_t i=0; i < _size; ++i) {
                    allocator_traits<allocator<T>>::construct(_a, _data + i, *(other._data + i));

            }
            else 
            {
                _data = nullptr;
                _size = 0;
            }
            return *this;
        }
        
        
        constexpr vector& operator=(vector&& other) noexcept 
        {
            if (this == &other) { return *this; }

            if constexpr (std::allocator_traits<allocator_type>::propagate_on_container_move_assignment::value) {
                deallocate_and_destruct(capacity(), size());
                m_allocator = other.get_allocator();
                m_vector = other.m_vector;
                reset(other);
            }
            else if (m_allocator == other.m_allocator) {
                deallocate_and_destruct(capacity(), size());
                m_vector = other.m_vector;
                reset(other);
            }
            else {
                destruct(size());
                reallocate(capacity(), other.capacity());
                            m_size = other.m_size;
            m_capacity = other.m_capacity;
            for (size_type index{ 0 }; index < m_size; ++index)
                allocator_traits<allocator_type>::construct(m_allocator, m_vector + index, std::move(*(other.m_vector + index)));
                
                uninitialized_alloc_move(std::move(other));
            }
            
            _size = other._size;
            _capacity = other._capacity;

            return *this;
        }
	
    ~myVector()
    {
        for (std::size_t i = 0; i < _size; ++i)
            allocator_traits<allocator<T>>::destroy(_a, _data + i);
        allocator_traits<allocator<T>>::deallocate(_a, _data, _capacity);
        _size = _capacity = 0;
        _data = nullptr;
    }
    
    T& operator[] (size_t i)
    {
        return _data[i];
    }

    // when move-construction could raise an exception, so if the value type's move-ctor is not exception safe, std::vector push_back() needs to use to the copy operation instead during size*2. 
    // 
    	template<class T>
	void Fwd(T &&v) { Call(std::forward<T>(v)); }

    // perfect forwarding
    // reference collapsing rules (save for A& & -> A&, which is C++98/03) exist for one reason: to allow  to work.
	// "Perfect" forwarding means to effectively forward parameters as if the user had called the function directly (minus elision, which is broken by forwarding). 
	// by value, by (possibly const) lvalue reference, and by (possibly const) rvalue reference.

    template<typename U>
    void push_back(U&& e)
    {
        bool moveNothrow = std::is_nothrow_move_constructible<Type>::value;
        // || (!std::is_nothrow_move_constructible<Type>::value && !std::is_copy_constructible<Type>::value)
        // or: nothrow move ctor, and no copy ctor

        if(_size < _capacity)
        {
            if(moveNoThrow)
            {
                allocator_traits<allocator<T>>::construct(_a, _data+_size, forward<U>(e));
                _size ++;
            }
            else
            {
                try
                {
                    allocator_traits<allocator<T>>::construct(_a, _data+_size, forward<U>(e));
                }
                catch(...)
                {
                    allocator_traits<allocator<T>>::destroy(_a, _data+_size);
                    throw;
                }
                _size ++;

            }
        }
        else
        {
            T* temp = allocator_traits<allocator<T>>::allocate(_a, _capacity*2);
            if(moveNothrow)
            {
                for(size_t i=0; i<_size; i++)
                    allocator_traits<allocator<T>>::construct(_a, temp+i, forward<T>(_data[i])); // move ctor                    
            }
            else
            {
                size_t success = 0;
                try
                {
                    for(size_t i=0; i<_size; i++)
                    {
                        allocator_traits<allocator<T>>::construct(_a, temp+i, _data[i]); // copy ctor
                        success++;
                    }
                }
                catch(...)
                {
                    for (size_t i=0; i < success; ++i)
                        allocator_traits<allocator_type>::destroy(_a, temp + i);
                    std::allocator_traits<allocator_type>::deallocate(m_allocator, temp, capacity);

                    throw;
                }
            }
            
            _data = temp;
            _size ++;
            _capacity *= 2;
        }           
    }
    
    inline size_t size() { return _size; }
    
	private:
	    size_t _size = 0;
	    size_t _capacity = 2;
	    T* _data = nullptr;
	    allocator<T> _a;
	};
	
	int main()
	{
	    
	    myVector<string> v;
	    v.push_back(move("h1"));
	    string s = "h2";
	    v.push_back(s);
	    v.push_back("h3");
	    v.push_back("h4");
	    
	    
	    /*
	    myVector<int> v;
	    v.push_back(1);
	    v.push_back(2);
	    v.push_back(3);
	    v.push_back(4);    */
	    myVector<string> v2(v);
	     for(size_t i=0; i<v2.size(); i++)
	        cout << i << v2[i] << endl;
	        
	    
	    return 0;
	}
