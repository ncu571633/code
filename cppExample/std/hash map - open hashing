#include <print>
#include <vector>
#include <functional>
#include <optional>
#include <stdexcept>
#include <utility>

constexpr size_t INITIAL_CAPACITY = 8;
constexpr double MAX_LOAD_FACTOR = 0.75;

template<typename K, typename V>
class hash_map {
public:
    hash_map() : hash_map(INITIAL_CAPACITY) {}

    explicit hash_map(size_t capacity)
        : _size(0),
          _capacity(capacity),
          buckets(capacity) {}

    ~hash_map() = default;

    // Copy operations
    hash_map(const hash_map& other)
        : _size(other._size),
          _capacity(other._capacity),
          buckets(other.buckets) {}

    hash_map& operator=(const hash_map& other) {
        if (this != &other) {
            _size = other._size;
            _capacity = other._capacity;
            buckets = other.buckets;
        }
        return *this;
    }

    // Move operations
    hash_map(hash_map&& other) noexcept
        : _size(std::exchange(other._size, 0)),
          _capacity(std::exchange(other._capacity, 0)),
          buckets(std::move(other.buckets)) {}

    hash_map& operator=(hash_map&& other) noexcept {
        if (this != &other) {
            _size = std::exchange(other._size, 0);
            _capacity = std::exchange(other._capacity, 0);
            buckets = std::move(other.buckets);
        }
        return *this;
    }

    template<typename Key, typename Value>
    void insert(Key&& key, Value&& value) {
        if (load_factor() >= MAX_LOAD_FACTOR) {
            resize(_capacity * 2);
        }

        size_t index = find_slot(key);
        if (!buckets[index].has_value()) {
            ++_size;
        }
        buckets[index] = std::make_pair(std::forward<Key>(key), 
                                      std::forward<Value>(value));
    }

    void erase(const K& key) {
        size_t index = find_existing(key);
        if (buckets[index].has_value()) {
            buckets[index].reset();
            --_size;
        }
    }

    V& operator[](const K& key) {
        size_t index = find_slot(key);
        if (!buckets[index].has_value()) {
            if (load_factor() >= MAX_LOAD_FACTOR) {
                resize(_capacity * 2);
                index = find_slot(key);
            }
            buckets[index] = std::make_pair(key, V{});
            ++_size;
        }
        return buckets[index]->second;
    }

    [[nodiscard]] size_t size() const { return _size; }
    [[nodiscard]] size_t capacity() const { return _capacity; }
    [[nodiscard]] double load_factor() const { 
        return static_cast<double>(_size) / _capacity; 
    }

private:
    size_t _size;
    size_t _capacity;
    std::vector<std::optional<std::pair<K, V>>> buckets;

    size_t hash(const K& key) const {
        return std::hash<K>{}(key) % _capacity;
    }

    size_t probe(size_t hash, size_t attempt) const {
        return (hash + attempt * attempt) % _capacity;
    }

    size_t find_slot(const K& key) const {
        size_t h = hash(key);
        for (size_t attempt = 0; ; ++attempt) {
            size_t index = probe(h, attempt);
            if (!buckets[index].has_value() || 
                buckets[index]->first == key) {
                return index;
            }
        }
    }

    size_t find_existing(const K& key) const {
        size_t h = hash(key);
        for (size_t attempt = 0; ; ++attempt) {
            size_t index = probe(h, attempt);
            if (!buckets[index].has_value()) break;
            if (buckets[index]->first == key) {
                return index;
            }
        }
        throw std::out_of_range("Key not found");
    }

    void resize(size_t new_capacity) {
        std::vector<std::optional<std::pair<K, V>>> new_buckets(new_capacity);
        std::swap(buckets, new_buckets);
        std::swap(_capacity, new_capacity);
        _size = 0;

        for (auto& entry : new_buckets) {
            if (entry.has_value()) {
                insert(std::move(entry->first), 
                      std::move(entry->second));
            }
        }
    }
};

int main() {
    hash_map<int, std::string> m;
    m.insert(1, "1");
    m.insert(2, "2");
    m.insert(3, "3");
    m.insert(4, "4");

    std::print("Size: {}\n", m.size());
    std::print("Value at 3: {}\n", m[3]);
    m[3] = "4";
    std::print("Updated value at 3: {}\n", m[3]);
    
    m.erase(3);
    std::print("Size after erase: {}\n", m.size());
    
    return 0;
}
