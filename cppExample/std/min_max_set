1. 
The comparator has to be a function ( T, T ) -> bool that establishes an ordering on T.
If the comparator returns true for two values, that means that they "compare less", i.e. the first value comes before the 2nd in the ordering. 

2. Overload () so struct act like a function (a functor).


#include <set>
#include <iostream>

int main()
{
    // set::set<int> s; // increasing
    // or std::set<int, std::less<int>> s; // increasing
    std::set<int, std::greater<int>> s;
    for (int i=0; i<10; i++)
        s.insert(i);
    
    for(auto& e: s)
    {
        std::cout << e << std::endl;
    }
    
    return 0;
}

****************************************************************************************
#include <set>
#include <iostream>
#include <string>

struct Trading_Event
{
    std::string ticker;
    int price;
    int vol;
};

struct Compare {
    bool operator()(const Trading_Event& a, const Trading_Event& b) const 
    {
        return a.price*a.vol > b.price*b.vol; // descreasing
        // return a.price*a.vol < b.price*b.vol; // increasing
    }
};

int main()
{
    std::set<Trading_Event, Compare> s;
    for (int i=0; i<10; i++)
    {
        s.insert({std::to_string(i), i, i});
    }
    
    for(auto& e: s)
    {
        std::cout << e.price << " " << e.vol << std::endl;
    }
    
    return 0;
}

****************************************************************************************
#include <vector>
#include <string>
#include <set>
#include <iostream>
#include <functional>

struct Trading_event
{
    std::string ticker;
    int price;
    int vol;
};

int main()
{
    auto compare = [](const Trading_event& t1, const Trading_event& t2){ return t1.price * t1.vol > t2.price * t2.vol;};
    std::set<Trading_event, decltype(compare)> s(compare);
    /*
    std::function<bool(const Trading_event&, const Trading_event&)> compare = 
        [](const Trading_event& t1, const Trading_event& t2)
        { return t1.price * t1.vol > t2.price * t2.vol;};
    std::set<Trading_event, std::function<bool(const Trading_event&, const Trading_event&)>> s(compare);
    */
    for (int i=0; i<10; i++)
    {
        s.insert({std::to_string(i), i, i});
    }
    
    for(auto& e: s)
    {
        std::cout << e.price << " " << e.vol << std::endl;
    }
    
    return 0;
}
