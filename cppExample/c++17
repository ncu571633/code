inline variable
A variable declared inline has the same semantics as a function declared inline: it can be defined, identically, in multiple translation units, 
must be defined in every translation unit in which it is used, and the behavior of the program is as if there was exactly one variable.

One Definition Rule. Within a program, each static object (if it's used) must be defined once, and only once.
Class definitions typically go in header files, included in multiple translation units (i.e. from multiple source files). 
If the static object's declaration in the header were a definition, then you'd end up with multiple definitions, 
one in each unit that includes the header, which would break the rule. 
So instead, it's not a definition, and you must provide exactly one definition somewhere else.

struct MyClass
{
    static const int sValue;
};

inline int const MyClass::sValue = 777;

Or even:

struct MyClass
{
    inline static const int sValue = 777;
};

*****************************************************************************************************************************
std::string_view：  the pointer to the character sequence and their length
std::string_view is faster than const std::string&
1. string: a memory allocation
2. work with substrings without a copy
3. No ownership. string_view is a pointer to someone else's memory
*****************************************************************************************************************************
std::filesystem

filesystem::path
exists
filesystem::create_directory
*****************************************************************************************************************************
Fold Expressions: reduce or “fold” a parameter pack over a binary operator 
“+ – * / % ^ & | = < > << >> += -= *= /= %= ^= &= |= <<= >>= == != <= >= && || , .* ->*”
#include <iostream> 
#include <vector> 

template <typename... Args> 
int all1(Args... args) 
{
    // Unary Left Fold: (... Operator Parameter)
    return (... * args); 
}

template <typename... Args> 
int all2(Args... args) 
{
    // Unary Right Fold: (Parameter Operator ...)
    return (args * ...); 
}

template<typename... Args> 
int all3(Args... args) 
{
    // Binary Right Fold: (Parameter Operator ... Operator init)
    return (args * ... * 2);
} 

template<typename... Args> 
int all4(Args... args) 
{
    // Binary Left Fold: (init Operator ... Operator Parameter)
    return (2 * ... * args);
} 

template<typename... Args>
void printer(Args&&... args)
{
    (std::cout << ... << args) << '\n';
}

template<typename T, typename... Args>
void push_back_vec(std::vector<T>& v, Args&&... args)
{
    (v.push_back(std::forward<Args>(args)), ...);
    // (..., v.push_back(std::forward<Args>(args)));
}

int main() 
{ 
    std::cout << "Result: " << all1(1, 2, 3, 4)  << std::endl; 
    std::cout << "Result: " << all2(1, 2, 3, 4)  << std::endl; 
    std::cout << "Result: " << all3(1, 2, 3, 4)  << std::endl; 
    std::cout << "Result: " << all4(1, 2, 3, 4)  << std::endl; 
    printer(1, 2, 3, "abc");
    
    std::vector<int> v;
    push_back_vec(v, 6, 2, 45, 12);
    for (int i : v)
        std::cout << i << ' ';

    return 0; 
}

*****************************************************************************************************************************
constexpr if it enables it to compile source code conditionally.
template <typename T>
auto get_value(T t) {
    if constexpr (std::is_pointer_v<T>)
        return *t; // deduces return type to int for T = int*
    else
        return t;  // deduces return type to int for T = int
}
*****************************************************************************************************************************
Initializers in if and switch statements: It limits the scope of length to the if alone

std::map<int,std::string> myMap;
if (auto result = myMap.insert(value); result.second){
    useResult(result.first);  
    // ...
} 
else{
    // ...
} // result is automatically destroyed

if(std::lock_guard _(mtx); guarded_thing.is_ready()) {
}

*****************************************************************************************************************************
Structured binding declarations：bind a std::tuple or a struct directly to variables
std::map<int,std::string> myMap;
if (auto [iter, succeeded] = myMap.insert(value); succeeded) {
    useIter(iter);  
    // ...
}
else{
    // ...
} iter and succeded are automatically be destroyed

*****************************************************************************************************************************
Return Value Optimisation：compiler is allowed to remove unnecessary copy operations

MyType func(){
  return MyType{};         // no copy with C++17
}
MyType myType = func();    // no copy with C++17
*****************************************************************************************************************************
Automatic type deduction of non-type template parameters
template <auto N>
class MyClass{
  ...
};

template <int N> 
class MyClass<N> {
  ...
};


MyClass<'x'> myClass2;     // Primary template for char
MyClass<2017>  myClass1;   // Partial specialisation for int
*****************************************************************************************************************************
std::optional: return int value, may not be valid. set this value as -1. or have two variable, one for value, another to  identify whether it is valid. 
    “value-or-not-value”, or “possibly an answer”, or “object with delayed initialization”

    #include <optional>
    std::optional<int> process(int v)
    {
        if(v == 0)
            return std::nullopt;
        return 1;
    }
    
    int main() {
        if (process(0) == std::nullopt)
            std::cout<< "value not set" << std::endl;
        std::cout << process(1).value() << std::endl;
        return 0;
    }

*****************************************************************************************************************************
std::any: replace void*, std::shared_ptr<void> 
    You can always cast a void* to any pointer type A whether or not the object it points at is actually a type A
    void* doesn’t manage lifetime like a smart pointer
    
    any remembers how to destroy the contained value for you when the any object is destroyed
    any knows what type it contains:
    and uses that knowledge to ensure that when you access the contained value – for example, by obtaining a reference with any_cast – you access it with the correct type:
    
    
    std::any a0; 
    std::any a1 = 42; 
    std::any a2 = month{"October"};

    assert(!a0.has_value());            // a0 is still empty
    assert(a1.type() == typeid(int));

    assert(std::any_cast<int&>(a1) == 42);

std::any : a container with an arbitrary type. std::any requires, that its values must be copyable.
    std::vector<std::any> anyVec(true,2017,std::string("test"),3.14,MyClass());

*****************************************************************************************************************************
std::variant  replance union: You don’t have a way to know what’s the currently used type and what’s more they won’t call destructors of the underlying types
    std::variant<int, float, std::string> intFloatString;
    static_assert(std::variant_size_v<decltype(intFloatString)> == 3);
    

#include <variant>
#include <string>
 
int main(){

  std::variant<int, float> v, w;
  v = 12;                              // v contains int
  int i = std::get<int>(v);
  w = std::get<int>(v);
  w = std::get<0>(v);                  // same effect as the previous line
  w = v;                               // same effect as the previous line
 
  //  std::get<double>(v);             // error: no double in [int, float]
  //  std::get<3>(v);                  // error: valid index values are 0 and 1
 
  try{
    std::get<float>(w);                // w contains int, not float: will throw
  }
  catch (std::bad_variant_access&) {}

}
