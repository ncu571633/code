inline variable
A variable declared inline has the same semantics as a function declared inline: it can be defined, identically, in multiple translation units, 
must be defined in every translation unit in which it is used, and the behavior of the program is as if there was exactly one variable.

One Definition Rule. Within a program, each static object (if it's used) must be defined once, and only once.
Class definitions typically go in header files, included in multiple translation units (i.e. from multiple source files). 
If the static object's declaration in the header were a definition, then you'd end up with multiple definitions, 
one in each unit that includes the header, which would break the rule. 
So instead, it's not a definition, and you must provide exactly one definition somewhere else.

struct MyClass
{
    static const int sValue;
};

inline int const MyClass::sValue = 777;

Or even:

struct MyClass
{
    inline static const int sValue = 777;
};


*****************************************************************************************************************************
std::optional: return int value, may not be valid. set this value as -1. or have two variable, one for value, another to  identify whether it is valid. 
    “value-or-not-value”, or “possibly an answer”, or “object with delayed initialization”

    #include <optional>
    std::optional<int> process(int v)
    {
        if(v == 0)
            return std::nullopt;
        return 1;
    }
    
    int main() {
        // Write C++ code here
        if (process(0) == std::nullopt)
            std::cout<< "value not set" << std::endl;
        std::cout << process(1).value() << std::endl;
        return 0;
    }

*****************************************************************************************************************************
std::any: replace void*, std::shared_ptr<void> 
    You can always cast a void* to any pointer type A whether or not the object it points at is actually a type A
    void* doesn’t manage lifetime like a smart pointer
    
    any remembers how to destroy the contained value for you when the any object is destroyed
    any knows what type it contains:
    and uses that knowledge to ensure that when you access the contained value – for example, by obtaining a reference with any_cast – you access it with the correct type:
    
    
    std::any a0; 
    std::any a1 = 42; 
    std::any a2 = month{"October"};

    assert(!a0.has_value());            // a0 is still empty
    assert(a1.type() == typeid(int));

    assert(std::any_cast<int&>(a1) == 42);
    
*****************************************************************************************************************************
std::variant  replance union: You don’t have a way to know what’s the currently used type and what’s more they won’t call destructors of the underlying types
    std::variant<int, float, std::string> intFloatString;
    static_assert(std::variant_size_v<decltype(intFloatString)> == 3);
    
    #include <iostream>
    #include <variant>

    struct Fluid { };
    struct LightItem { };
    struct HeavyItem { };
    struct FragileItem { };

    struct VisitPackage {
        void operator()(Fluid& )       { std::cout << "fluid\n"; }
        void operator()(LightItem& )   { std::cout << "light item\n"; }
        void operator()(HeavyItem& )   { std::cout << "heavy item\n"; }
        void operator()(FragileItem& ) { std::cout << "fragile\n"; }
    };

    int main() {
    std::variant<Fluid, LightItem, HeavyItem, FragileItem> package { 
        FragileItem()
    };
