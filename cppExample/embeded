Memory layout:
1. stack
2. heap
3. .bss   uninitialized static data, both variables and constants
static int i;
static char a[12];

Advantage:
Saves disk space (no need to store zeros in the executable)
Efficient for large arrays that don’t need explicit initialization.


4. .data  initialized static variables, i.e. global variables and local static variables 
int i = 3;
char a[] = "Hello World";
static int b = 2023;    // Initialized static global variable
void foo (void) {
  static int c = 2023; // Initialized static local variable
}

5. code segment, also known as text segment
contains executable code and is generally read-only and fixed size

******************************************************************************************************************************************

Alignment
CPU can only memory at alignment of its word size
Speed: CPU reads memory, shift 1 byte. 
Aligned accesses are more likely to fit within a single cache line or memory bus transaction. 
atmoic: read aligned memory atmoically

Padding:
Many processors expect memory for variables to be aligned based on the size of the variable. 
the structure padding is automatically done by the compiler to make sure all its members are byte aligned.
A ‘char’ of 1 byte can be allocated anywhere in memory like 0x5000 or 0x5001. 
An ‘int’ of 4 bytes, must start at a 4-byte boundary like 0x5004 or 0x5008. T

******************************************************************************************************************************************
Big-endian is an order in which the "big end" (most significant value in the sequence) is stored first, at the lowest storage address. 
Little-endian is an order in which the "little end" (least significant value in the sequence) is stored first.

******************************************************************************************************************************************
size of
    cout<<sizeof(char) << endl; // 1
    cout<<sizeof(int) << endl;   // 4
    cout<<sizeof(double) << endl; // 8
    cout<<sizeof(float) << endl;  // 4
    cout<<sizeof(int*) << endl;   // 8
    cout<<sizeof(double*) << endl; // 8
******************************************************************************************************************************************

// double round to closest int
int (d+0.5)

// round to closest 8/16/24/32...
// if 12, then return 16
// if 12, then return 8
int myround(int x)
{
    // return ((x+4) >> 3) << 3;
    return ((x+3) >> 3) << 3;
}

n & (n-1)
only 0 and the powers of two (1, 2, 4 and 8) result in a 0000/false bit pattern, all others are non-zero or true.
    
    
    // get each bit
     for (int i = 0; i < 32; ++i)
         (n & ( 1 << i )) >> k
         (n >> i) & 1
******************************************************************************************************************************************

complement
补码是一种用二进制表示有符号数的方法。 正数和0 的补码就是该数字本身。
负数的补码则是将其对应正数按位取反再加1。 
补码系统的最大优点是可以在加法或减法处理中，不需因为数字的正负而使用不同的计算方式。
        if (num < 0) x = UINT_MAX + num + 1;
        

******************************************************************************************************************************************
allocate aligned memory
    uintptr_t mask = ~(uintptr_t)(align - 1);
    void *mem = malloc(1024+align-1);
    void *ptr = ((uintptr_t)mem+align-1) & mask;
    ptr[-1] = mem;
    return ptr;
aligned malloc implementation

void* aligned_malloc(size_t required_bytes, size_t alignment)
{
    void* p1; // original block
    void** p2; // aligned block
    int offset = alignment - 1 + sizeof(void*);
    if ((p1 = (void*)malloc(required_bytes + offset)) == NULL)
    {
       return NULL;
    }
    p2 = (void**)(((size_t)(p1) + offset) & ~(alignment - 1));
    p2[-1] = p1;
    return p2;
}

void aligned_free(void *p)
{
    free(((void**)p)[-1]);
}

void main (int argc, char *argv[])
{
    char **endptr;
    int *p = aligned_malloc (100, strtol(argv[1], endptr, 10));

    printf ("%s: %p\n", argv[1], p);
    aligned_free (p);
}

    You need an offset if you want to support alignments beyond what your system's malloc() does. 
For example if your system malloc() aligns to 8 byte boundaries, and you want to align to 16 bytes, 
you ask for 15 bytes extra so you know for sure you can shift the result around to align it as requested. 
You also add sizeof(void*) to the size you pass to malloc() to leave room for bookkeeping.

    ~(alignment - 1) is what guarantees the alignment. 
For example if alignment is 16, then subtract 1 to get 15, aka 0xF, then negating it makes 0xFF..FF0 
which is the mask you need to satisfy the alignment for any returned pointer from malloc(). 
Note that this trick assumes alignment is a power of 2 (which practically it normally would be, but there really should be a check).

    It's a void**. The function returns void*. 
This is OK because a pointer to void is "A pointer to any type," and in this case that type is void*. 
In other words, converting void* to and from other pointer types is allowed, and a double-pointer is still a pointer.

    The overall scheme here is to store the original pointer before the one that's returned to the caller. 
Some implementations of standard malloc() do the same thing: stash bookkeeping information before the returned block. This makes it easy to know how much space to reclaim when free() is called.

******************************************************************************************************************************************
((size_t)&(((PodType *)0)->c))
Since we are considering 0 as address of the structure variable, 
c will be placed after 16 bytes of its base address i.e. 0x00 + 0x10. 
Applying & on the structure element (in this case it is c) returns the address of the element which is 0x10. 
Casting the address to unsigned int (size_t) results in number of bytes the element is placed in the structure.

#include <stdio.h>

#define OFFSETOF(TYPE, ELEMENT) ((size_t)&(((TYPE *)0)->ELEMENT))
 
typedef struct PodTag
{
   int     i;
   double  d;
   char    c;
} PodType;
 
int main()
{
   printf("%d", OFFSETOF(PodType, c) );
   getchar();
   return 0;
}

******************************************************************************************************************************************
