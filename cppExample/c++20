****************************************************************************************
C++20 takes string_view and makes it more generic via the std::span type
It serves as a non-owning, lightweight reference to a contiguous range of objects
It’s particularly useful in functions that need to operate on a portion of an array or a vector without requiring ownership of the data.
#include <iostream>
#include <span>
#include <vector>

void print(std::span<const int> sp) {
    for (int i : sp)
        std::cout << i << " ";
    std::cout << '\n';
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    std::span<int> sp(arr, 5);
    std::vector nums { 10, 11, 12, 13 };
    std::span<int> subSp = sp.subspan(1, 3);

    print(sp);
    print(nums);
    print(subSp);
}

****************************************************************************************
Range Views: Range Views enable lazy evaluation, which allows operations like filter, transform, 
or concatenate to be expressed in a readable, declarative style without immediate evaluation, often leading to performance improvements
The view rv doesn’t do any job when creating it. We only compose the final receipt. 
The execution happens lazy only when we iterate through it.

Prever a and b, since a/b is a user-facing algorithm and should be preferred over option c (which should be considered implementation detail).
auto a = v | views::transform(square);
auto b = views::transform(v, square);
auto c = ranges::transform_view(v, square);

* for each
int main()
{
    int sum = 0;
    std::string in{"123456"};
    std::ranges::for_each(in, [&sum](const char& x) { sum = sum * 10 + x - '0'; });
    std::cout << sum ;
}

* all: returns a view that includes all elements of its range argument.
std::vector nums = {1, 2, 3, 4, 5, 6};
std::views::all(nums);

* Filter
#include <iostream>
#include <ranges>
#include <vector>
int main() {
    std::vector nums = {1, 2, 3, 4, 5, 6};
    auto even_nums = nums | std::views::filter([](int n) { return n % 2 == 0; })
                        | std::views::transform([](int n) { return n * n; });
    for (int n : even_nums)
        std::cout << n << " "; 
}
// 4, 16, 36

* Drop
drop(n): creates a view excluding the first N elements of a range
drop_while(p): leading elements that match a predicate are dropped

std::vector nums = {1, 2, 3, 4, 5, 6};
auto even_nums = nums
    | std::views::drop_while([](int n) { return n % 2 == 1; } )
    | std::views::transform([](int n) { return n * n; });
// 4 9 16 25 36 

* Take
take(n): take first n elements
take_while(n): initial elements of another view, until the first element on which a predicate returns false
std::vector nums = {1, 2, 3, 4, 5, 6};
auto even_nums = nums
    | std::views::take_while([](int n) { return n % 2 == 1; } )
    | std::views::transform([](int n) { return n * n; });

* Join: sequence obtained from flattening a view of ranges
Join_With: sequence obtained from flattening a view of ranges, with the delimiter in between elements
 const std::vector<std::vector<int>> v{{1, 2}, {3, 4, 5}, {6}, {7, 8, 9}};
    auto jv = std::ranges::join_view(v);
// 1 2 3 4 5 6 7 8 9
    std::vector v{"This"sv, "is"sv, "a"sv, "test."sv};
    auto joined = v | std::views::join_with(' ');
// This is a test.

* Split: obtained from splitting another view using a delimiter
    using std::operator""sv;
    constexpr auto words{"Hello^_^C++^_^20^_^!"sv};
    constexpr auto delim{"^_^"sv};
    for (const auto word : std::views::split(words, delim))
        // with string_view's C++23 range constructor:
        std::cout << std::quoted(std::string_view(word)) << ' ';
// "Hello" "C++" "20" "!"

* Concat
    std::vector<int> v0{1, 2, 3}, v1{4, 5};
    int a[]{6, 7};
    int i{8};
    auto ie{std::views::single(i)}; 
    auto con = std::views::concat(v0, v1, a, ie);
con: [1, 2, 3, 4, 5, 6, 7, 8]

* reverse
* keys: takes a view consisting of pair-like values and produces a view of the first elements of each pair
values:  takes a view consisting of pair-like values and produces a view of the second elements of each pair
std::map<std::string, int> map{{"one", 1}, {"two", 2}}; 
for (auto const& key : std::views::keys(map))
    std::cout << key << ' ';
for (auto const& key : std::views::values(map))
    std::cout << key << ' ';

* zip: tuples of references to corresponding elements of the adapted views
    auto x = std::vector{1, 2, 3, 4};
    auto y = std::list<std::string>{"α", "β", "γ", "δ", "ε"};
    auto z = std::array{'A', 'B', 'C', 'D', 'E', 'F'};
    for (std::tuple<int&, std::string&, char&> elem : std::views::zip(x, y, z))
    {
        std::cout << std::get<0>(elem) << ' '
                  << std::get<1>(elem) << ' '
                  << std::get<2>(elem) << '\n';
    }

* enumerate: maps each element of adapted sequence to a tuple of both the element's position and its value
    constexpr static auto v = {'A', 'B', 'C', 'D'};
    for (auto const [index, letter] : std::views::enumerate(v))
        std::cout << '(' << index << ':' << letter << ") ";
    std::cout << '\n';
(0:A) (1:B) (2:C) (3:D)

****************************************************************************************
Concept: a set of constraints on template parameters evaluated at compile time.
Write requirements for templates which the compiler can check
In template, type T could be any type. concept can make T only be double/int...

#include <numeric>
#include <vector>
#include <iostream>
#include <concepts>

template <typename T> 
requires std::integral<T> || std::floating_point<T>
constexpr double Average(std::vector<T> const &vec) {
    const double sum = std::accumulate(vec.begin(), vec.end(), 0.0);        
    return sum / vec.size();
}

int main() {
    std::vector ints { 1, 2, 3, 4, 5};
    std::cout << Average(ints) << '\n';                                      
}

template<typename T>
concept Integral = std::is_integral<T>::value;
Integral auto gcd(Integral auto a,     
                  Integral auto b){
    if( b == 0 ) return a; 
    else return gcd(b, a % b);
}


template<typename T>
concept has_string_data_member = requires(T v) { 
    { v.name_ } -> std::convertible_to<std::string>; 
};

struct Person {
    int age_ { 0 };
    std::string name_;
};

struct Box {
    double weight_ { 0.0 };
    double volume_ { 0.0 };
};

int main() {
    static_assert(has_string_data_member<Person>);
    static_assert(!has_string_data_member<Box>);
}

****************************************************************************************
