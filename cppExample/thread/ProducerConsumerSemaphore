#include <iostream>
#include <thread>
#include <queue>
#include <mutex>
#include <semaphore>

std::mutex mtx;  // Protect queue access
std::queue<int> q;
constexpr int MAXBUFFERSIZE = 10;

std::counting_semaphore<MAXBUFFERSIZE> empty(MAXBUFFERSIZE);  // Tracks available slots
std::counting_semaphore<MAXBUFFERSIZE> full(0);    // Tracks filled slots

void producer() {
    for (int i = 0; i < 20; i++) {
        empty.acquire();  // Wait for empty slot
        {
            std::lock_guard<std::mutex> lock(mtx);
            q.push(i);
            std::cout << "Produced: " << i << std::endl;
        }
        full.release();  // Signal new item
    }
}

void consumer() {
    for (int i = 0; i < 20; i++) {
        full.acquire();  // Wait for item
        {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << "Consumed: " << q.front() << std::endl;
            q.pop();
        }
        empty.release();  // Signal free slot
    }
}

int main() {
    std::jthread consumer_thread(consumer);
    std::jthread producer_thread(producer);
    return 0;
}
