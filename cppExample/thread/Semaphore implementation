#include <mutex>
#include <condition_variable>

class Semaphore {
    std::size_t avail;
    std::mutex m;
    std::condition_variable cv;
public:
    explicit Semaphore(std::size_t count = 0) : avail(count) {}

    void acquire() {
        std::unique_lock<std::mutex> lk(m);
        cv.wait(lk, [this] { return avail > 0; });
        --avail;
    }

    void release() {
        std::lock_guard<std::mutex> lk(m);
        ++avail;
        cv.notify_one();
    }

    // Optional: try_acquire()
    bool try_acquire() {
        std::lock_guard<std::mutex> lk(m);
        if (avail > 0) {
            --avail;
            return true;
        }
        return false;
    }
};
