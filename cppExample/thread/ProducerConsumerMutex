#include <condition_variable>
#include <iostream>
#include <mutex>
#include <thread>
#include <queue>

using namespace std;

mutex mtx;
condition_variable cv;
std::queue<int> q;

constexpr int dataCount = 10;

void producer()
{
    for (int i=0; i<dataCount; i++)
    {
        // lock release
        lock_guard<mutex> lock(mtx);
        q.push(i);
        cout << "Data Produced: " << i<< endl;
        cv.notify_one();
    }
}

void consumer()
{
   for (int i=0; i<dataCount; i++)
    {
        unique_lock<mutex> lock(mtx);
        cv.wait(lock, [] { return !q.empty(); });
        cout << "Data consumed!" << q.front() << endl;
        q.pop();
    }
}

int main()
{
    jthread consumer_thread(consumer);
    jthread producer_thread(producer);

    return 0;
}
