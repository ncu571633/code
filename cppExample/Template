Template meta-programming (TMP) refers to uses of the C++ template system to perform computation at compile-time within the code

This is because 'variables' are all immutable, and hence it is necessary to use recursion rather than iteration to process elements of a set

********************************************************************************************
Template Specialization: get a special behavior for a particular data type
    template <class T>
    void fun(T a)
    {
       cout << "The main template fun(): "
            << a << endl;
    }

    template<>
    void fun(int a)
    {
        cout << "Specialized Template for int type: "
             << a << endl;
    }

********************************************************************************************
Variadic Template

    base case. Idea: unpack and reduce
    template <typename T>
    double sum(T t) {
      return t;
    }

    template <typename T, typename... Rest> //typename... Rest: template parameter pack
    double sum(T t, Rest... rest) {  //Rest... rest: funciton parameter pack
      return t + sum(rest...);
    }

********************************************************************************************
Variadic data structures

https://github.com/mortificador/blog/blob/master/tuple.hpp

#include <cstddef> // for std::size_t
#include <utility> // for std::foward
#include <string>
#include <type_traits>
#include <iostream>
using namespace std;
template <int _index, typename T>
class _tuple_impl
{
public:
  _tuple_impl(T const &v) { val = v; }
  _tuple_impl(T &&v) { val = std::move(v); }
  T &get() { return val; }

private:
  T val;
};

// general template, will be used only when there is no arguments
template <int _index, typename... types>
class _tuple_recurr_base
{
};

// This is a partial specialization, so as long as there is at least one argument
// this specialization is preferred to the _tuple_recurr_base<std::size_t, typename ...types>
template <int _index, typename L, typename... types>
class _tuple_recurr_base<_index, L, types...> : public _tuple_impl<_index, L>,
                                                public _tuple_recurr_base<_index + 1, types...>
{
public:
  template <typename CL, typename... CArgs>
  _tuple_recurr_base(const CL &arg, const CArgs &... args) : _tuple_impl<_index, CL>(arg),
                                                   _tuple_recurr_base<_index + 1, types...>(args...)
  {
  }
};

template <typename L, typename... types>
class mytuple : public _tuple_recurr_base<0, L, types...>
{
public:
  // The constructor uses the same recursion as the inheritance
  template <typename... CArgs>
  mytuple(CArgs &&... args) : _tuple_recurr_base<0, L, types...>(std::forward<CArgs>(args)...)
  {
  }

  template <typename... Args>
  friend bool operator==(mytuple<Args...> &t1, mytuple<Args...> &t2);
};

// template deduction guideline
template <typename... CArgs>
mytuple(CArgs... args)->mytuple<CArgs...>;

// extract_type_at is a class that, given a list of types and an index, defines a type member
// with the type of the index given from the list (zero based index).
// E.g. extract<1, int, double, float>::type == double
// For this we define ::type recursively, until we hit index zero, at that point there is a specialization
// that defines the member ::type, and stops the recursion
template <std::size_t index, typename L, typename... Args>
struct extract_type_at
{
  using type = typename extract_type_at<index - 1, Args...>::type;
};

// This is the stop type. If the index is zero, we define the member type to be the correspondent type
template <typename L, typename... Args>
struct extract_type_at<0, L, Args...>
{
  using type = L;
};

// Method to get the value of a tuple, given an index
// We cast the tuple to the base class that corresponds to the index
// and type for that index
template <std::size_t index, typename... Args>
auto &get(mytuple<Args...> &t)
{
  return (static_cast<_tuple_impl<index, typename extract_type_at<index, Args...>::type> &>(t)).get();
}

template <std::size_t index, typename... Args>
bool compare_tuple(mytuple<Args...> &t1, mytuple<Args...> &t2)
{
  if constexpr (index == 0)
  {
    return get<0>(t1) == get<0>(t2);
  }
  else
  {
    return get<index>(t1) == get<index>(t2) && compare_tuple<index - 1>(t1, t2);
  }
}

template <typename... Args>
bool operator==(mytuple<Args...> &t1, mytuple<Args...> &t2)
{
  return compare_tuple<sizeof...(Args) - 1>(t1, t2);
}

int main()
{
    mytuple t{5.0, 6, string("hello")};
    cout << get<2>(t); 
    return 1;
}

********************************************************************************************
Recursion

template <int N>
struct Factorial {
  static const int value = N * Factorial<N - 1>::value;
};

// Specialization of Factorial for base case = 1.
template <>
struct Factorial<1> {
  static const int value = 1;
};

int main() {
  std::cout << Factorial<5>::value << std::endl;
}


********************************************************************************************
Branching: 
A conditional branch can be constructed by writing two alternative specialisations of a template class. 
The compiler will choose the one that fits the types provided, and a value defined in the instantiated class can then be accessed.

    template<typename T, typename U>
    struct is_same 
    {
        static const bool value = false; 
    };

    template<typename T>
    struct is_same<T,T>  //specialization
    { 
       static const bool value = true; 
    };

********************************************************************************************
SFINAE (Substitution failure is not an error)
There are some overloading functions with template. 
The compiler tries to substitute of arguments for one of the template function, and an error happens. 
Instead of stopping with a compilation error, compilier continues with other functions. 

When the compiler tries to compile a function call (simplified):
    Perform a name lookup.
    For function templates the template argument values are deduced from the types of the actual arguments passed into the function.
        All occurrences of the template parameter (in the return type and parameters types) are substituted with those deduced types.
        When this process leads to invalid type the particular function is removed from the overload resolution set. 
(SFINAE)
    At the end, we have a list of viable functions that can be used for the specific call.
        If this set is empty, then the compilation fails.
        If more than one function is chosen, we have an ambiguity.
        In general, the candidate function, whose parameters match the arguments most closely is the one that is called.


#include <iostream>
using namespace std;
void print( int iNum )
{
         cout<<"int print( int )"<< endl;
}
template < typename _Ty >
void print( _Ty tt, typename _Ty::value_type* pvt_dummy = NULL )
{
           typename _Ty::value_type vt_someval;
           cout<<"template < typename _Ty >"<< endl;
}
int main()
{
         short siNum = 10;
         print( siNum );
         return 0;
}

********************************************************************************************
enable_if is a set of tools, available in the Standard Library since C++11, that internally use SFINAE. 
They allow to include or exclude overloads from possible function templates or class template specialization.

Use enable_if

template <class T>
typename std::enable_if_t<std::is_arithmetic_v<T>, T> // << shorter!
foo(T t) {
  std::cout << "foo<arithmetic T>\n";
  return t;
}

template <class T>
typename std::enable_if_t<!std::is_arithmetic_v<T>, void>
foo(T t) {
  std::cout << "foo fallback\n";
}

********************************************************************************************

Curiously Recurring Template Pattern (CRTP) 

template <class T> 
struct Base
{
    void interface()
    {
        // ...
        static_cast<T*>(this)->implementation();
        // ...
    }

    static void static_func()
    {
        // ...
        T::static_sub_func();
        // ...
    }
};

struct Derived : Base<Derived>
{
    void implementation();
    static void static_sub_func();
};

********************************************************************************************
    cout<<(typeid(int) == typeid(double)) << endl;
    std::cout << "int is: " << typeid(int).name() << endl;
    
    
template<class T = void>
struct My_op_functor { /* ... */ };

My_op_functor<> f;  or My_op_functor f in C++17


template <typename T1, typename T2, ..., typename Tn>
void ignore(T1 t1, T2 t2, ..., Tn tn) {}
