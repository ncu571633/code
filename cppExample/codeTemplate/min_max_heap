A max heap is a complete binary tree in which the value of a node is greater than or equal to the values of its children. 
Max Heap data structure is useful for sorting data using heap sort.
We can only get top().

***************************************************************************************************

#include <queue>
#include <vector>
#include <iostream>

int main()
{
    // std::priority_queue<int, std::vector<int>, std::greater<int>> heap; // min Heap
    std::priority_queue<int> heap; // max heap
    // can also be:
    // std::priority_queue<int, std::vector<int>, std::less<int>> maxHeap;
    
    for (int i=0; i<10; i++)
        heap.push(i);
    
    while(!heap.empty())
    {
        std::cout << heap.top() << std::endl;
        heap.pop();
    }
    
    return 0;
}

***************************************************************************************************  
#include <queue>
#include <vector>
#include <iostream>
#include <string>

struct Trading_Event
{
    std::string ticker;
    int price;
    int vol;
};

struct Compare {
    bool operator()(const Trading_Event& a, const Trading_Event& b) const 
    {
        // return a.price*a.vol > b.price*b.vol; // min-heap by price
        return a.price*a.vol < b.price*b.vol; // max-heap by price
    }
};

int main()
{
    std::priority_queue<Trading_Event, std::vector<Trading_Event>, Compare> heap;
    for (int i=0; i<10; i++)
    {
        heap.push({std::to_string(i), i, i});
    }
    
    while(!heap.empty())
    {
        Trading_Event e = heap.top();
        std::cout << e.price << " " << e.vol << std::endl;
        heap.pop();
    }
    
    return 0;
}

***************************************************************************************************
#include <queue>
#include <vector>
#include <iostream>
#include <string>

struct Trading_Event
{
    std::string ticker;
    int price;
    int vol;
};

int main()
{
    auto cmp = [](const Trading_Event& a, const Trading_Event& b) {
        // return a.price * a.vol < b.price * b.vol; // Max-heap comparison
        return a.price * a.vol > b.price * b.vol; // min-heap comparison
    };
    
    std::priority_queue<Trading_Event, 
                        std::vector<Trading_Event>, 
                        decltype(cmp)> heap(cmp);
    for (int i=0; i<10; i++)
    {
        heap.push({std::to_string(i), i, i});
    }
    
    while(!heap.empty())
    {
        Trading_Event e = heap.top();
        std::cout << e.price << " " << e.vol << std::endl;
        heap.pop();
    }
    
    return 0;
}

***************************************************************************************************
Pre-allocating Underlying Storage: specify queue size
std::vector<int> storage;
storage.reserve(100); // Pre-allocate space for 100 elements
std::priority_queue<int, std::vector<int>> heap(std::less<int>(), std::move(storage));
