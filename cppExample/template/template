https://www.geeksforgeeks.org/cpp/templates-cpp/

Template types:
    Function Templates
    Class Templates
    Variable Templates (Since C++ 14)
        template <typename T> 
        constexpr T pi = T(3.14159);

    Default Template Arguments
        template <typename T1, typename T2 = double, typename T3 = string>
        class Geek {
          public:
            T1 x;
            T2 y;
            T3 z;
        };

********************************************************************************************
Template Specialization: get a special behavior for a particular data type
    template <class T>
    void fun(T a)
    {
       cout << "The main template fun(): "
            << a << endl;
    }

    template<>
    void fun(int a)
    // can also be: void fun<int>(int a)
    {
        cout << "Specialized Template for int type: "
             << a << endl;
    }

class: 
#include <iostream>
using namespace std;

template <class T>
class Test
{
public:
   Test()
   {
       cout << "General template object \n";
   }
};

template <>
class Test <int>
{
public:
   Test()
   {
       cout << "Specialized template object\n";
   }
};

int main()
{
    Test<int> a;
    Test<char> b;
    Test<float> c;
    return 0;
}
********************************************************************************************
Template Non-Type Arguments: 
  Non-type parameters are mainly used for specifying max or min values or any other constant value for a particular instance of a template
  The important thing to note about non-type parameters is, that they must be const
template <class T, int max> 
int arrMin(T arr[], int n)
{
    int m = max;
    for (int i = 0; i < n; i++)
        if (arr[i] < m)
            m = arr[i];
    return m;
}

********************************************************************************************
Template Argument Deduction
    Template argument deduction automatically deduces the data type of the argument passed to the templates. 
This allows us to instantiate the template without explicitly specifying the data type.
int main()
{
    cout << max(3, 4);
    return 0;
}

********************************************************************************************
Template meta-programming (TMP) refers to uses of the C++ template system to perform computation at compile-time within the code
In C++, template metaprogramming refers to template perform computation at the compile time rather than runtime. 
To perform computation at compile time, 
template metaprogramming involves recursive template structures where templates call other templates during compilation.

Recursive:

template <int N> 
struct Factorial
{
    static const int value = 2 * Factorial<N - 1>::value;
};

// Specialization for the
// base case (Factorial<0>)
template <> 
struct Factorial<0>
{
    static const int value = 1;
};

int main()
{
    cout << Factorial<8>::value << endl;
    return 0;
}

********************************************************************************************
Variadic Template

    base case. Idea: unpack and reduce
    template <typename T>
    double sum(T t) {
      return t;
    }

    template <typename T, typename... Rest> //typename... Rest: template parameter pack
    double sum(T t, Rest... rest) {  //Rest... rest: funciton parameter pack
      return t + sum(rest...);
    }


********************************************************************************************
Branching: 
A conditional branch can be constructed by writing two alternative specialisations of a template class. 
The compiler will choose the one that fits the types provided, and a value defined in the instantiated class can then be accessed.

#include <iostream>
using namespace std;

template <typename T, typename U>
struct isSameClass
{
    static const bool value = false;
};

template <typename T>
struct isSameClass<T, T>
{
    static const bool value = true;
};

template <class A, class B>
bool IsSameClass() {
    return isSameClass<A, B>::value;
}

int main() {
    cout << IsSameClass<int, double>() << endl;
    cout << IsSameClass<int, int>() << endl;
    return 0;
}

********************************************************************************************

Curiously Recurring Template Pattern (CRTP) 

template <typename Derived>
struct Base {
    void interface() {
        static_cast<Derived*>(this)->implementation();
    }
};

struct Derived : Base<Derived> {
    void implementation() {
        std::cout << "Derived implementation called\n";
    }
};

int main() {
    Derived d;
    d.interface(); // Output: Derived implementation called
}

********************************************************************************************
SFINAE (Substitution failure is not an error)
There are some overloading functions with template. 
The compiler tries to substitute of arguments for one of the template function, and an error happens. 
Instead of stopping with a compilation error, compilier continues with other functions. 

When the compiler tries to compile a function call (simplified):
    Perform a name lookup.
    For function templates the template argument values are deduced from the types of the actual arguments passed into the function.
        All occurrences of the template parameter (in the return type and parameters types) are substituted with those deduced types.
        When this process leads to invalid type the particular function is removed from the overload resolution set. 
(SFINAE)
    At the end, we have a list of viable functions that can be used for the specific call.
        If this set is empty, then the compilation fails.
        If more than one function is chosen, we have an ambiguity.
        In general, the candidate function, whose parameters match the arguments most closely is the one that is called.


#include <iostream>
using namespace std;
void print( int iNum )
{
         cout<<"int print( int )"<< endl;
}
template < typename _Ty >
void print( _Ty tt, typename _Ty::value_type* pvt_dummy = NULL )
{
           typename _Ty::value_type vt_someval;
           cout<<"template < typename _Ty >"<< endl;
}
int main()
{
         short siNum = 10;
         print( siNum );
         return 0;
}


********************************************************************************************
enable_if is a set of tools, available in the Standard Library since C++11, that internally use SFINAE. 
They allow to include or exclude overloads from possible function templates or class template specialization.

Use enable_if

template <class T>
typename std::enable_if_t<std::is_arithmetic_v<T>, T> // << shorter!
foo(T t) {
  std::cout << "foo<arithmetic T>\n";
  return t;
}

template <class T>
typename std::enable_if_t<!std::is_arithmetic_v<T>, void>
foo(T t) {
  std::cout << "foo fallback\n";
}


********************************************************************************************
Implement a template function IsDerivedFrom() that takes class C and class P as template parameters. 
It should return true when class C is derived from class P and false otherwise.
template<typename D, typename B>
class IsDerivedFromHelper
{
    class No { };
    class Yes { No no[3]; };
    
    static Yes Test( B* );
    static No Test( ... );
public:
    enum { Is = sizeof(Test(static_cast<D*>(0))) == sizeof(Yes) };
    
};


template <class C, class P> 
bool IsDerivedFrom() {
    return IsDerivedFromHelper<C, P>::Is;
}

********************************************************************************************
How can you make sure a C++ function can be called as e.g. void foo(int, int) but not as any other type like void foo(long, long)?

void foo(int a, int b) {
// whatever
}
template <typename T1, typename T2> 
void foo(T1 a, T2 b) = delete;
