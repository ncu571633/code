template <class T>
class my_unique_ptr {
private:
    T* ptr = nullptr;

public:
    my_unique_ptr() = default;  // Default constructor

    explicit my_unique_ptr(T* p) : ptr(p) {} 
    
    my_unique_ptr(const my_unique_ptr&) = delete;  // Copy forbidden
    my_unique_ptr& operator=(const my_unique_ptr&) = delete;  // Copy forbidden

    my_unique_ptr(my_unique_ptr&& dyingObj) noexcept
        : ptr(dyingObj.ptr) 
    {
        dyingObj.ptr = nullptr;
    }

    my_unique_ptr& operator=(my_unique_ptr&& dyingObj) noexcept
    {
        if (this != &dyingObj) {
            __cleanup__();
            ptr = dyingObj.ptr;
            dyingObj.ptr = nullptr;
        }
        return *this;
    }

    T* operator->() const { return ptr; }
    T& operator*() const { return *ptr; }

    ~my_unique_ptr() { __cleanup__(); }

    // Optional helper functions
    T* get() const noexcept { return ptr; }
    explicit operator bool() const noexcept { return ptr != nullptr; }

private:
    void __cleanup__() {
        delete ptr;
        ptr = nullptr;
    }
};


template<class T>
class my_shared_ptr
{
private:
	T * ptr = nullptr;
	unsigned int * refCount = nullptr;	// should be pointer, so the value can be shared between different objects

public:
	my_shared_ptr() : ptr(nullptr), refCount(new unsigned int(0)) {} // default constructor
	my_shared_ptr(T * ptr) : ptr(ptr), refCount(new unsigned int(1))  {} // constructor

	my_shared_ptr(const my_shared_ptr & obj) // copy constructor
	{
		this->ptr = obj.ptr; // share the underlying pointer
		this->refCount = obj.refCount;
		if (nullptr != obj.ptr)
		{
			(*this->refCount)++; // if the pointer is not null, increment the refCount
		}
	}

	my_shared_ptr& operator=(const my_shared_ptr & obj) // copy assignment
	{
		__cleanup__(); // cleanup any existing data
		
		// Assign incoming object's data to this object
		this->ptr = obj.ptr; // share the underlying pointer
		this->refCount = obj.refCount;
		if (nullptr != obj.ptr)
		{
			(*this->refCount)++; // if the pointer is not null, increment the refCount
		}
	}

	/*** Move Semantics ***/
	my_shared_ptr(my_shared_ptr && dyingObj) // move constructor
	{
		this->ptr = dyingObj.ptr; // share the underlying pointer
		this->refCount = dyingObj.refCount;

		dyingObj.ptr = dyingObj.refCount = nullptr; // clean the dying object
	}

	my_shared_ptr& operator=(my_shared_ptr && dyingObj) // move assignment
	{
		__cleanup__(); // cleanup any existing data
		
		this->ptr = dyingObj.ptr; // share the underlying pointer
		this->refCount = dyingObj.refCount;

		dyingObj.ptr = dyingObj.refCount = nullptr; // clean the dying object
	}

	unsigned int get_count() const 
	{
		return *refCount; // *this->refCount
	}

	T* get() const { return this->ptr; }

	T* operator->() const
	{
		return this->ptr;
	}

	T& operator*() const
	{
		return this->ptr;
	}

	~my_shared_ptr() // destructor
	{
		__cleanup__();
	}

private:
	void __cleanup__()
	{
		(*refCount)--;
		if (*refCount == 0)
		{
			if (nullptr != ptr)
				delete ptr;
			delete refCount;
		}
	}
};
