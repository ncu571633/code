https://www.stroustrup.com/C++11FAQ.html

Core language features
1. auto and decltype
2. defaulted and deleted functions
  = default: use the compiler-generated version of that function, so you don't need to specify a body.
  move constructor isn't always generated by default. 
  default constructor does memberwise copy. it recursively copies/assigns based on what the members do. I.e. 
  it copies all the members of the class using their copy constructors. If those members have copy constructors that do a deep copy then you'll get a deep copy, 
  if they do a shallow copy then you'll get a shallow copy, or they could do something else entirely.
  
  = delete means to disable the usage of a member function
  The "delete" mechanism can be used for any function. For example, we can eliminate an undesired conversion like this:
  Deleting of special member functions provides a cleaner way of preventing the compiler from generating special member functions that we donâ€™t want.
	struct Z {
		// ...

		Z(long long);     // can initialize with an long long
		Z(long) = delete; // but not anything less
	};

3. final and override
    override: Every time you define a method in the derived class that overrides a virtual method in the base class, you should tag it override
    (1). It shows the reader of the code that "this is a virtual method, that is overriding a virtual method of the base class."
    (2). The compiler also knows that it's an override, so it can "check" that you are not altering/adding new methods that you think are overrides.

    final: This prevents any derived class of Derived to override the member function, or prevent the type to be inherited from.

3. trailing return type
   removes a C++ limitation where the return type of a function template cannot be generalized if the return type depends on the types of the function arguments.
   return auto type, for template case
   
4. rvalue references
5. move constructors and move assignment operators

6. scoped enums
    constexpr and literal types
    list initialization
    delegating and inherited constructors
    brace-or-equal initializers
    nullptr
    long long
    char16_t and char32_t
    type aliases
    variadic templates
    generalized (non-trivial) unions
    generalized PODs (trivial types and standard-layout types)
    Unicode string literals
    user-defined literals
    attributes
    lambda expressions
    noexcept specifier and noexcept operator
    alignof and alignas
    multithreaded memory model
    thread-local storage
    GC interface (removed in C++23)
    range-for (based on a Boost library)
    static_assert (based on a Boost library) 
