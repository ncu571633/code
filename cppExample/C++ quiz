https://www.geeksforgeeks.org/c-plus-plus-gq/
https://www.geeksforgeeks.org/c-plus-plus-gq/constructors-gq/

1. What is the return value of f(p, p) if the value of p is initialized to 5 before the call? 
Note that the first parameter is passed by reference, whereas the second parameter is passed by value.
int f(int &x, int c) {
   c  = c - 1;
   if (c == 0) return 1;
   x = x + 1;
   return f(x, c) * x;
} 

2. 
#include<iostream>
using namespace std;
 
int &fun()
{
    static int x = 10;
    return x;
}
int main()
{
    fun() = 30;
    cout << fun();
    return 0;
}

3. 
#include<iostream>
using namespace std;
 
int &fun()
{
    int x = 10;
    return x;
}
int main()
{
    fun() = 30;
    cout << fun();
    return 0;
}

4. 
Predict the output of following C++ progran
#include <iostream>
using namespace std;
  
int i;
  
class A
{
public:
    ~A()
    {
        i=10;
    }
};
  
int foo()
{
    i=3;
    A ob;
    return i;
}
  
int main()
{
    cout << foo() << endl;
    return 0;
}

5. 
Predict the output of following C++ program?
include<iostream>
using namespace std;
  
class Test
{
protected:
    int x;
public:
    Test (int i):x(i) { }
    void fun() const  { cout << "fun() const " << endl; }
    void fun()        {  cout << "fun() " << endl;     }
};
  
int main()
{
    Test t1 (10);
    const Test t2 (20);
    t1.fun();
    t2.fun();
    return 0;
}

6. 
Predict the output of following C++ program.
#include<iostream>
using namespace std;
 
class Test
{
private:
  int x;
public:
  Test(int x = 0) { this->x = x; }
  void change(Test *t) { this = t; }
  void print() { cout << "x = " << x << endl; }
};
 
int main()
{
  Test obj(5);
  Test *ptr = new Test (10);
  obj.change(ptr);
  obj.print();
  return 0;
}

7. 
#include<iostream>
using namespace std;
int x = 1;
void fun()
{
    int x = 2;
    {
        int x = 3;
        cout << ::x << endl;
    }
}
int main()
{
    fun();
    return 0;
}

8. 
#include<iostream>
using namespace std;
 
union A {
  int a;
  unsigned int b;
  A() { a = 10; }
  unsigned int getb() {return b;}
};
 
int main()
{
    A obj;
    cout << obj.getb();
    return 0;
}

1. 
Since c is passed by value and x is passed by reference, all functions will have same copy of x, but different copies of c. f(5, 5) = f(x, 4)*x = f(x, 3)*x*x = f(x, 2)*x*x*x = f(x, 1)*x*x*x*x = 1*x*x*x*x = x^4 Since x is incremented in every function call, it becomes 9 after f(x, 2) call. So the value of expression x^4 becomes 9^4 which is 6561.

2. 
When a function returns by reference, it can be used as lvalue. Since x is a static variable, it is shared among function calls and the initialization line "static int x = 10;" is executed only once. The function call fun() = 30, modifies x to 30. The next call "cout << fun()" returns the modified value.

3. 
Since we return reference to a local variable, the memory location becomes invalid after function call is over. Hence it may result in segmentation fault runtime error.

4. 
While returning from a function, destructor is the last method to be executed. The destructor for the object “ob” is called after the value of i is copied to the return value of the function. So, before destructor could change the value of i to 10, the current value of i gets copied & hence the output is i = 3. See this for more details.

5. 
The two methods ‘void fun() const’ and ‘void fun()’ have same signature except that one is const and other is not. 
Also, if we take a closer look at the output, we observe that, ‘const void fun()’ is called on const object and ‘void fun()’ is called on non-const object. 
C++ allows member methods to be overloaded on the basis of const type. 
Overloading on the basis of const type can be useful when a function return reference or pointer. 
We can make one function const, that returns a const reference or const pointer, other non-const function, that returns non-const reference or pointer. 

6. 
this is a const pointer, so there is an error in line "this = t;"

7. 
The value of ::x is 1. The scope resolution operator when used with a variable name, always refers to global variable.

8. 
Like struct and class, union can have methods. Like struct and unlike class, members of union are public by default. 
Since data members of union share memory, the value of b becomes same as a.

9.
my_struct_t *bar;
/* ... do stuff, including setting bar to point to a defined my_struct_t object ... */
memset(bar, 0, sizeof(bar));

The last argument to memset should be sizeof(*bar), not sizeof(bar). 

10. How to print address of ch
char ch = 'a'

int main()
{
    char ch = 'a';
    std::cout<< &ch << std::endl;
int main()
{
    char ch = 'a';
    std::cout<< (void *)&ch << std::endl;
    std::cout<< &ch << std::endl;
    return 0;
}
    return 0;
}


